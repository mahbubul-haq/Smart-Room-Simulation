
pir_light_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000244  00800060  00002912  000029a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000096  008002a4  008002a4  00002bea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bf0  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  000059ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b9c  00000000  00000000  00006245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00007de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074c  00000000  00000000  000081b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e76  00000000  00000000  00008900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000a776  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 97 04 	jmp	0x92e	; 0x92e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 0c 	call	0x1862	; 0x1862 <main>
      8a:	0c 94 87 14 	jmp	0x290e	; 0x290e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_send>:
#include <util/delay.h>
#include <stdio.h>



char intToChar(int x) {return x + '0';}
      92:	5d 9b       	sbis	0x0b, 5	; 11
      94:	fe cf       	rjmp	.-4      	; 0x92 <uart_send>
      96:	8c b9       	out	0x0c, r24	; 12
      98:	08 95       	ret

0000009a <pinChange>:
      9a:	67 2b       	or	r22, r23
      9c:	09 f0       	breq	.+2      	; 0xa0 <pinChange+0x6>
      9e:	df c0       	rjmp	.+446    	; 0x25e <pinChange+0x1c4>
      a0:	00 97       	sbiw	r24, 0x00	; 0
      a2:	21 f4       	brne	.+8      	; 0xac <pinChange+0x12>
      a4:	8b b3       	in	r24, 0x1b	; 27
      a6:	8e 7f       	andi	r24, 0xFE	; 254
      a8:	8b bb       	out	0x1b, r24	; 27
      aa:	08 95       	ret
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	91 05       	cpc	r25, r1
      b0:	21 f4       	brne	.+8      	; 0xba <pinChange+0x20>
      b2:	8b b3       	in	r24, 0x1b	; 27
      b4:	8d 7f       	andi	r24, 0xFD	; 253
      b6:	8b bb       	out	0x1b, r24	; 27
      b8:	08 95       	ret
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	91 05       	cpc	r25, r1
      be:	21 f4       	brne	.+8      	; 0xc8 <pinChange+0x2e>
      c0:	8b b3       	in	r24, 0x1b	; 27
      c2:	8b 7f       	andi	r24, 0xFB	; 251
      c4:	8b bb       	out	0x1b, r24	; 27
      c6:	08 95       	ret
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	91 05       	cpc	r25, r1
      cc:	21 f4       	brne	.+8      	; 0xd6 <pinChange+0x3c>
      ce:	8b b3       	in	r24, 0x1b	; 27
      d0:	87 7f       	andi	r24, 0xF7	; 247
      d2:	8b bb       	out	0x1b, r24	; 27
      d4:	08 95       	ret
      d6:	84 30       	cpi	r24, 0x04	; 4
      d8:	91 05       	cpc	r25, r1
      da:	21 f4       	brne	.+8      	; 0xe4 <pinChange+0x4a>
      dc:	8b b3       	in	r24, 0x1b	; 27
      de:	8f 7e       	andi	r24, 0xEF	; 239
      e0:	8b bb       	out	0x1b, r24	; 27
      e2:	08 95       	ret
      e4:	85 30       	cpi	r24, 0x05	; 5
      e6:	91 05       	cpc	r25, r1
      e8:	21 f4       	brne	.+8      	; 0xf2 <pinChange+0x58>
      ea:	8b b3       	in	r24, 0x1b	; 27
      ec:	8f 7d       	andi	r24, 0xDF	; 223
      ee:	8b bb       	out	0x1b, r24	; 27
      f0:	08 95       	ret
      f2:	86 30       	cpi	r24, 0x06	; 6
      f4:	91 05       	cpc	r25, r1
      f6:	21 f4       	brne	.+8      	; 0x100 <pinChange+0x66>
      f8:	8b b3       	in	r24, 0x1b	; 27
      fa:	8f 7b       	andi	r24, 0xBF	; 191
      fc:	8b bb       	out	0x1b, r24	; 27
      fe:	08 95       	ret
     100:	87 30       	cpi	r24, 0x07	; 7
     102:	91 05       	cpc	r25, r1
     104:	21 f4       	brne	.+8      	; 0x10e <pinChange+0x74>
     106:	8b b3       	in	r24, 0x1b	; 27
     108:	8f 77       	andi	r24, 0x7F	; 127
     10a:	8b bb       	out	0x1b, r24	; 27
     10c:	08 95       	ret
     10e:	8a 30       	cpi	r24, 0x0A	; 10
     110:	91 05       	cpc	r25, r1
     112:	21 f4       	brne	.+8      	; 0x11c <pinChange+0x82>
     114:	88 b3       	in	r24, 0x18	; 24
     116:	8e 7f       	andi	r24, 0xFE	; 254
     118:	88 bb       	out	0x18, r24	; 24
     11a:	08 95       	ret
     11c:	8b 30       	cpi	r24, 0x0B	; 11
     11e:	91 05       	cpc	r25, r1
     120:	21 f4       	brne	.+8      	; 0x12a <pinChange+0x90>
     122:	88 b3       	in	r24, 0x18	; 24
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	88 bb       	out	0x18, r24	; 24
     128:	08 95       	ret
     12a:	8c 30       	cpi	r24, 0x0C	; 12
     12c:	91 05       	cpc	r25, r1
     12e:	21 f4       	brne	.+8      	; 0x138 <pinChange+0x9e>
     130:	88 b3       	in	r24, 0x18	; 24
     132:	8b 7f       	andi	r24, 0xFB	; 251
     134:	88 bb       	out	0x18, r24	; 24
     136:	08 95       	ret
     138:	8d 30       	cpi	r24, 0x0D	; 13
     13a:	91 05       	cpc	r25, r1
     13c:	21 f4       	brne	.+8      	; 0x146 <pinChange+0xac>
     13e:	88 b3       	in	r24, 0x18	; 24
     140:	87 7f       	andi	r24, 0xF7	; 247
     142:	88 bb       	out	0x18, r24	; 24
     144:	08 95       	ret
     146:	8e 30       	cpi	r24, 0x0E	; 14
     148:	91 05       	cpc	r25, r1
     14a:	21 f4       	brne	.+8      	; 0x154 <pinChange+0xba>
     14c:	88 b3       	in	r24, 0x18	; 24
     14e:	8f 7e       	andi	r24, 0xEF	; 239
     150:	88 bb       	out	0x18, r24	; 24
     152:	08 95       	ret
     154:	8f 30       	cpi	r24, 0x0F	; 15
     156:	91 05       	cpc	r25, r1
     158:	21 f4       	brne	.+8      	; 0x162 <pinChange+0xc8>
     15a:	88 b3       	in	r24, 0x18	; 24
     15c:	8f 7d       	andi	r24, 0xDF	; 223
     15e:	88 bb       	out	0x18, r24	; 24
     160:	08 95       	ret
     162:	80 31       	cpi	r24, 0x10	; 16
     164:	91 05       	cpc	r25, r1
     166:	21 f4       	brne	.+8      	; 0x170 <pinChange+0xd6>
     168:	88 b3       	in	r24, 0x18	; 24
     16a:	8f 7b       	andi	r24, 0xBF	; 191
     16c:	88 bb       	out	0x18, r24	; 24
     16e:	08 95       	ret
     170:	81 31       	cpi	r24, 0x11	; 17
     172:	91 05       	cpc	r25, r1
     174:	21 f4       	brne	.+8      	; 0x17e <pinChange+0xe4>
     176:	88 b3       	in	r24, 0x18	; 24
     178:	8f 77       	andi	r24, 0x7F	; 127
     17a:	88 bb       	out	0x18, r24	; 24
     17c:	08 95       	ret
     17e:	84 31       	cpi	r24, 0x14	; 20
     180:	91 05       	cpc	r25, r1
     182:	21 f4       	brne	.+8      	; 0x18c <pinChange+0xf2>
     184:	85 b3       	in	r24, 0x15	; 21
     186:	8e 7f       	andi	r24, 0xFE	; 254
     188:	85 bb       	out	0x15, r24	; 21
     18a:	08 95       	ret
     18c:	85 31       	cpi	r24, 0x15	; 21
     18e:	91 05       	cpc	r25, r1
     190:	21 f4       	brne	.+8      	; 0x19a <pinChange+0x100>
     192:	85 b3       	in	r24, 0x15	; 21
     194:	8d 7f       	andi	r24, 0xFD	; 253
     196:	85 bb       	out	0x15, r24	; 21
     198:	08 95       	ret
     19a:	86 31       	cpi	r24, 0x16	; 22
     19c:	91 05       	cpc	r25, r1
     19e:	21 f4       	brne	.+8      	; 0x1a8 <pinChange+0x10e>
     1a0:	85 b3       	in	r24, 0x15	; 21
     1a2:	8b 7f       	andi	r24, 0xFB	; 251
     1a4:	85 bb       	out	0x15, r24	; 21
     1a6:	08 95       	ret
     1a8:	87 31       	cpi	r24, 0x17	; 23
     1aa:	91 05       	cpc	r25, r1
     1ac:	21 f4       	brne	.+8      	; 0x1b6 <pinChange+0x11c>
     1ae:	85 b3       	in	r24, 0x15	; 21
     1b0:	87 7f       	andi	r24, 0xF7	; 247
     1b2:	85 bb       	out	0x15, r24	; 21
     1b4:	08 95       	ret
     1b6:	88 31       	cpi	r24, 0x18	; 24
     1b8:	91 05       	cpc	r25, r1
     1ba:	21 f4       	brne	.+8      	; 0x1c4 <pinChange+0x12a>
     1bc:	85 b3       	in	r24, 0x15	; 21
     1be:	8f 7e       	andi	r24, 0xEF	; 239
     1c0:	85 bb       	out	0x15, r24	; 21
     1c2:	08 95       	ret
     1c4:	89 31       	cpi	r24, 0x19	; 25
     1c6:	91 05       	cpc	r25, r1
     1c8:	21 f4       	brne	.+8      	; 0x1d2 <pinChange+0x138>
     1ca:	85 b3       	in	r24, 0x15	; 21
     1cc:	8f 7d       	andi	r24, 0xDF	; 223
     1ce:	85 bb       	out	0x15, r24	; 21
     1d0:	08 95       	ret
     1d2:	8a 31       	cpi	r24, 0x1A	; 26
     1d4:	91 05       	cpc	r25, r1
     1d6:	21 f4       	brne	.+8      	; 0x1e0 <pinChange+0x146>
     1d8:	85 b3       	in	r24, 0x15	; 21
     1da:	8f 7b       	andi	r24, 0xBF	; 191
     1dc:	85 bb       	out	0x15, r24	; 21
     1de:	08 95       	ret
     1e0:	8b 31       	cpi	r24, 0x1B	; 27
     1e2:	91 05       	cpc	r25, r1
     1e4:	21 f4       	brne	.+8      	; 0x1ee <pinChange+0x154>
     1e6:	85 b3       	in	r24, 0x15	; 21
     1e8:	8f 77       	andi	r24, 0x7F	; 127
     1ea:	85 bb       	out	0x15, r24	; 21
     1ec:	08 95       	ret
     1ee:	8e 31       	cpi	r24, 0x1E	; 30
     1f0:	91 05       	cpc	r25, r1
     1f2:	21 f4       	brne	.+8      	; 0x1fc <pinChange+0x162>
     1f4:	82 b3       	in	r24, 0x12	; 18
     1f6:	8e 7f       	andi	r24, 0xFE	; 254
     1f8:	82 bb       	out	0x12, r24	; 18
     1fa:	08 95       	ret
     1fc:	8f 31       	cpi	r24, 0x1F	; 31
     1fe:	91 05       	cpc	r25, r1
     200:	21 f4       	brne	.+8      	; 0x20a <pinChange+0x170>
     202:	82 b3       	in	r24, 0x12	; 18
     204:	8d 7f       	andi	r24, 0xFD	; 253
     206:	82 bb       	out	0x12, r24	; 18
     208:	08 95       	ret
     20a:	80 32       	cpi	r24, 0x20	; 32
     20c:	91 05       	cpc	r25, r1
     20e:	21 f4       	brne	.+8      	; 0x218 <pinChange+0x17e>
     210:	82 b3       	in	r24, 0x12	; 18
     212:	8b 7f       	andi	r24, 0xFB	; 251
     214:	82 bb       	out	0x12, r24	; 18
     216:	08 95       	ret
     218:	81 32       	cpi	r24, 0x21	; 33
     21a:	91 05       	cpc	r25, r1
     21c:	21 f4       	brne	.+8      	; 0x226 <pinChange+0x18c>
     21e:	82 b3       	in	r24, 0x12	; 18
     220:	87 7f       	andi	r24, 0xF7	; 247
     222:	82 bb       	out	0x12, r24	; 18
     224:	08 95       	ret
     226:	82 32       	cpi	r24, 0x22	; 34
     228:	91 05       	cpc	r25, r1
     22a:	21 f4       	brne	.+8      	; 0x234 <pinChange+0x19a>
     22c:	82 b3       	in	r24, 0x12	; 18
     22e:	8f 7e       	andi	r24, 0xEF	; 239
     230:	82 bb       	out	0x12, r24	; 18
     232:	08 95       	ret
     234:	83 32       	cpi	r24, 0x23	; 35
     236:	91 05       	cpc	r25, r1
     238:	21 f4       	brne	.+8      	; 0x242 <pinChange+0x1a8>
     23a:	82 b3       	in	r24, 0x12	; 18
     23c:	8f 7d       	andi	r24, 0xDF	; 223
     23e:	82 bb       	out	0x12, r24	; 18
     240:	08 95       	ret
     242:	84 32       	cpi	r24, 0x24	; 36
     244:	91 05       	cpc	r25, r1
     246:	21 f4       	brne	.+8      	; 0x250 <pinChange+0x1b6>
     248:	82 b3       	in	r24, 0x12	; 18
     24a:	8f 7b       	andi	r24, 0xBF	; 191
     24c:	82 bb       	out	0x12, r24	; 18
     24e:	08 95       	ret
     250:	85 97       	sbiw	r24, 0x25	; 37
     252:	09 f0       	breq	.+2      	; 0x256 <pinChange+0x1bc>
     254:	e1 c0       	rjmp	.+450    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     256:	82 b3       	in	r24, 0x12	; 18
     258:	8f 77       	andi	r24, 0x7F	; 127
     25a:	82 bb       	out	0x12, r24	; 18
     25c:	08 95       	ret
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	21 f4       	brne	.+8      	; 0x26a <pinChange+0x1d0>
     262:	8b b3       	in	r24, 0x1b	; 27
     264:	81 60       	ori	r24, 0x01	; 1
     266:	8b bb       	out	0x1b, r24	; 27
     268:	08 95       	ret
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	91 05       	cpc	r25, r1
     26e:	21 f4       	brne	.+8      	; 0x278 <pinChange+0x1de>
     270:	8b b3       	in	r24, 0x1b	; 27
     272:	82 60       	ori	r24, 0x02	; 2
     274:	8b bb       	out	0x1b, r24	; 27
     276:	08 95       	ret
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	91 05       	cpc	r25, r1
     27c:	21 f4       	brne	.+8      	; 0x286 <pinChange+0x1ec>
     27e:	8b b3       	in	r24, 0x1b	; 27
     280:	84 60       	ori	r24, 0x04	; 4
     282:	8b bb       	out	0x1b, r24	; 27
     284:	08 95       	ret
     286:	83 30       	cpi	r24, 0x03	; 3
     288:	91 05       	cpc	r25, r1
     28a:	21 f4       	brne	.+8      	; 0x294 <pinChange+0x1fa>
     28c:	8b b3       	in	r24, 0x1b	; 27
     28e:	88 60       	ori	r24, 0x08	; 8
     290:	8b bb       	out	0x1b, r24	; 27
     292:	08 95       	ret
     294:	84 30       	cpi	r24, 0x04	; 4
     296:	91 05       	cpc	r25, r1
     298:	21 f4       	brne	.+8      	; 0x2a2 <pinChange+0x208>
     29a:	8b b3       	in	r24, 0x1b	; 27
     29c:	80 61       	ori	r24, 0x10	; 16
     29e:	8b bb       	out	0x1b, r24	; 27
     2a0:	08 95       	ret
     2a2:	85 30       	cpi	r24, 0x05	; 5
     2a4:	91 05       	cpc	r25, r1
     2a6:	21 f4       	brne	.+8      	; 0x2b0 <pinChange+0x216>
     2a8:	8b b3       	in	r24, 0x1b	; 27
     2aa:	80 62       	ori	r24, 0x20	; 32
     2ac:	8b bb       	out	0x1b, r24	; 27
     2ae:	08 95       	ret
     2b0:	86 30       	cpi	r24, 0x06	; 6
     2b2:	91 05       	cpc	r25, r1
     2b4:	21 f4       	brne	.+8      	; 0x2be <pinChange+0x224>
     2b6:	8b b3       	in	r24, 0x1b	; 27
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	8b bb       	out	0x1b, r24	; 27
     2bc:	08 95       	ret
     2be:	87 30       	cpi	r24, 0x07	; 7
     2c0:	91 05       	cpc	r25, r1
     2c2:	21 f4       	brne	.+8      	; 0x2cc <pinChange+0x232>
     2c4:	8b b3       	in	r24, 0x1b	; 27
     2c6:	80 68       	ori	r24, 0x80	; 128
     2c8:	8b bb       	out	0x1b, r24	; 27
     2ca:	08 95       	ret
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	91 05       	cpc	r25, r1
     2d0:	21 f4       	brne	.+8      	; 0x2da <pinChange+0x240>
     2d2:	88 b3       	in	r24, 0x18	; 24
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	88 bb       	out	0x18, r24	; 24
     2d8:	08 95       	ret
     2da:	8b 30       	cpi	r24, 0x0B	; 11
     2dc:	91 05       	cpc	r25, r1
     2de:	21 f4       	brne	.+8      	; 0x2e8 <pinChange+0x24e>
     2e0:	88 b3       	in	r24, 0x18	; 24
     2e2:	82 60       	ori	r24, 0x02	; 2
     2e4:	88 bb       	out	0x18, r24	; 24
     2e6:	08 95       	ret
     2e8:	8c 30       	cpi	r24, 0x0C	; 12
     2ea:	91 05       	cpc	r25, r1
     2ec:	21 f4       	brne	.+8      	; 0x2f6 <pinChange+0x25c>
     2ee:	88 b3       	in	r24, 0x18	; 24
     2f0:	84 60       	ori	r24, 0x04	; 4
     2f2:	88 bb       	out	0x18, r24	; 24
     2f4:	08 95       	ret
     2f6:	8d 30       	cpi	r24, 0x0D	; 13
     2f8:	91 05       	cpc	r25, r1
     2fa:	21 f4       	brne	.+8      	; 0x304 <pinChange+0x26a>
     2fc:	88 b3       	in	r24, 0x18	; 24
     2fe:	88 60       	ori	r24, 0x08	; 8
     300:	88 bb       	out	0x18, r24	; 24
     302:	08 95       	ret
     304:	8e 30       	cpi	r24, 0x0E	; 14
     306:	91 05       	cpc	r25, r1
     308:	21 f4       	brne	.+8      	; 0x312 <pinChange+0x278>
     30a:	88 b3       	in	r24, 0x18	; 24
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	88 bb       	out	0x18, r24	; 24
     310:	08 95       	ret
     312:	8f 30       	cpi	r24, 0x0F	; 15
     314:	91 05       	cpc	r25, r1
     316:	21 f4       	brne	.+8      	; 0x320 <pinChange+0x286>
     318:	88 b3       	in	r24, 0x18	; 24
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	88 bb       	out	0x18, r24	; 24
     31e:	08 95       	ret
     320:	80 31       	cpi	r24, 0x10	; 16
     322:	91 05       	cpc	r25, r1
     324:	21 f4       	brne	.+8      	; 0x32e <pinChange+0x294>
     326:	88 b3       	in	r24, 0x18	; 24
     328:	80 64       	ori	r24, 0x40	; 64
     32a:	88 bb       	out	0x18, r24	; 24
     32c:	08 95       	ret
     32e:	81 31       	cpi	r24, 0x11	; 17
     330:	91 05       	cpc	r25, r1
     332:	21 f4       	brne	.+8      	; 0x33c <pinChange+0x2a2>
     334:	88 b3       	in	r24, 0x18	; 24
     336:	80 68       	ori	r24, 0x80	; 128
     338:	88 bb       	out	0x18, r24	; 24
     33a:	08 95       	ret
     33c:	84 31       	cpi	r24, 0x14	; 20
     33e:	91 05       	cpc	r25, r1
     340:	21 f4       	brne	.+8      	; 0x34a <pinChange+0x2b0>
     342:	85 b3       	in	r24, 0x15	; 21
     344:	81 60       	ori	r24, 0x01	; 1
     346:	85 bb       	out	0x15, r24	; 21
     348:	08 95       	ret
     34a:	85 31       	cpi	r24, 0x15	; 21
     34c:	91 05       	cpc	r25, r1
     34e:	21 f4       	brne	.+8      	; 0x358 <pinChange+0x2be>
     350:	85 b3       	in	r24, 0x15	; 21
     352:	82 60       	ori	r24, 0x02	; 2
     354:	85 bb       	out	0x15, r24	; 21
     356:	08 95       	ret
     358:	86 31       	cpi	r24, 0x16	; 22
     35a:	91 05       	cpc	r25, r1
     35c:	21 f4       	brne	.+8      	; 0x366 <pinChange+0x2cc>
     35e:	85 b3       	in	r24, 0x15	; 21
     360:	84 60       	ori	r24, 0x04	; 4
     362:	85 bb       	out	0x15, r24	; 21
     364:	08 95       	ret
     366:	87 31       	cpi	r24, 0x17	; 23
     368:	91 05       	cpc	r25, r1
     36a:	21 f4       	brne	.+8      	; 0x374 <pinChange+0x2da>
     36c:	85 b3       	in	r24, 0x15	; 21
     36e:	88 60       	ori	r24, 0x08	; 8
     370:	85 bb       	out	0x15, r24	; 21
     372:	08 95       	ret
     374:	88 31       	cpi	r24, 0x18	; 24
     376:	91 05       	cpc	r25, r1
     378:	21 f4       	brne	.+8      	; 0x382 <pinChange+0x2e8>
     37a:	85 b3       	in	r24, 0x15	; 21
     37c:	80 61       	ori	r24, 0x10	; 16
     37e:	85 bb       	out	0x15, r24	; 21
     380:	08 95       	ret
     382:	89 31       	cpi	r24, 0x19	; 25
     384:	91 05       	cpc	r25, r1
     386:	21 f4       	brne	.+8      	; 0x390 <pinChange+0x2f6>
     388:	85 b3       	in	r24, 0x15	; 21
     38a:	80 62       	ori	r24, 0x20	; 32
     38c:	85 bb       	out	0x15, r24	; 21
     38e:	08 95       	ret
     390:	8a 31       	cpi	r24, 0x1A	; 26
     392:	91 05       	cpc	r25, r1
     394:	21 f4       	brne	.+8      	; 0x39e <pinChange+0x304>
     396:	85 b3       	in	r24, 0x15	; 21
     398:	80 64       	ori	r24, 0x40	; 64
     39a:	85 bb       	out	0x15, r24	; 21
     39c:	08 95       	ret
     39e:	8b 31       	cpi	r24, 0x1B	; 27
     3a0:	91 05       	cpc	r25, r1
     3a2:	21 f4       	brne	.+8      	; 0x3ac <pinChange+0x312>
     3a4:	85 b3       	in	r24, 0x15	; 21
     3a6:	80 68       	ori	r24, 0x80	; 128
     3a8:	85 bb       	out	0x15, r24	; 21
     3aa:	08 95       	ret
     3ac:	8e 31       	cpi	r24, 0x1E	; 30
     3ae:	91 05       	cpc	r25, r1
     3b0:	21 f4       	brne	.+8      	; 0x3ba <pinChange+0x320>
     3b2:	82 b3       	in	r24, 0x12	; 18
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	82 bb       	out	0x12, r24	; 18
     3b8:	08 95       	ret
     3ba:	8f 31       	cpi	r24, 0x1F	; 31
     3bc:	91 05       	cpc	r25, r1
     3be:	21 f4       	brne	.+8      	; 0x3c8 <pinChange+0x32e>
     3c0:	82 b3       	in	r24, 0x12	; 18
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	82 bb       	out	0x12, r24	; 18
     3c6:	08 95       	ret
     3c8:	80 32       	cpi	r24, 0x20	; 32
     3ca:	91 05       	cpc	r25, r1
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <pinChange+0x33c>
     3ce:	82 b3       	in	r24, 0x12	; 18
     3d0:	84 60       	ori	r24, 0x04	; 4
     3d2:	82 bb       	out	0x12, r24	; 18
     3d4:	08 95       	ret
     3d6:	81 32       	cpi	r24, 0x21	; 33
     3d8:	91 05       	cpc	r25, r1
     3da:	21 f4       	brne	.+8      	; 0x3e4 <pinChange+0x34a>
     3dc:	82 b3       	in	r24, 0x12	; 18
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	82 bb       	out	0x12, r24	; 18
     3e2:	08 95       	ret
     3e4:	82 32       	cpi	r24, 0x22	; 34
     3e6:	91 05       	cpc	r25, r1
     3e8:	21 f4       	brne	.+8      	; 0x3f2 <pinChange+0x358>
     3ea:	82 b3       	in	r24, 0x12	; 18
     3ec:	80 61       	ori	r24, 0x10	; 16
     3ee:	82 bb       	out	0x12, r24	; 18
     3f0:	08 95       	ret
     3f2:	83 32       	cpi	r24, 0x23	; 35
     3f4:	91 05       	cpc	r25, r1
     3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3f8:	82 b3       	in	r24, 0x12	; 18
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	82 bb       	out	0x12, r24	; 18
     3fe:	08 95       	ret
     400:	84 32       	cpi	r24, 0x24	; 36
     402:	91 05       	cpc	r25, r1
     404:	21 f4       	brne	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     406:	82 b3       	in	r24, 0x12	; 18
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	82 bb       	out	0x12, r24	; 18
     40c:	08 95       	ret
     40e:	85 97       	sbiw	r24, 0x25	; 37
     410:	19 f4       	brne	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     412:	82 b3       	in	r24, 0x12	; 18
     414:	80 68       	ori	r24, 0x80	; 128
     416:	82 bb       	out	0x12, r24	; 18
     418:	08 95       	ret

0000041a <Lcd4_Port>:
     41a:	cf 93       	push	r28
     41c:	c8 2f       	mov	r28, r24
     41e:	80 ff       	sbrs	r24, 0
     420:	07 c0       	rjmp	.+14     	; 0x430 <Lcd4_Port+0x16>
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	82 e2       	ldi	r24, 0x22	; 34
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     42e:	06 c0       	rjmp	.+12     	; 0x43c <Lcd4_Port+0x22>
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	82 e2       	ldi	r24, 0x22	; 34
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     43c:	c1 ff       	sbrs	r28, 1
     43e:	07 c0       	rjmp	.+14     	; 0x44e <Lcd4_Port+0x34>
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	83 e2       	ldi	r24, 0x23	; 35
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     44c:	06 c0       	rjmp	.+12     	; 0x45a <Lcd4_Port+0x40>
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	83 e2       	ldi	r24, 0x23	; 35
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     45a:	c2 ff       	sbrs	r28, 2
     45c:	07 c0       	rjmp	.+14     	; 0x46c <Lcd4_Port+0x52>
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	84 e2       	ldi	r24, 0x24	; 36
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     46a:	06 c0       	rjmp	.+12     	; 0x478 <Lcd4_Port+0x5e>
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	84 e2       	ldi	r24, 0x24	; 36
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     478:	c3 ff       	sbrs	r28, 3
     47a:	07 c0       	rjmp	.+14     	; 0x48a <Lcd4_Port+0x70>
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	85 e2       	ldi	r24, 0x25	; 37
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     488:	06 c0       	rjmp	.+12     	; 0x496 <Lcd4_Port+0x7c>
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	85 e2       	ldi	r24, 0x25	; 37
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <Lcd4_Cmd>:
     49a:	cf 93       	push	r28
     49c:	c8 2f       	mov	r28, r24
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     4aa:	8c 2f       	mov	r24, r28
     4ac:	0e 94 0d 02 	call	0x41a	; 0x41a <Lcd4_Port>
     4b0:	61 e0       	ldi	r22, 0x01	; 1
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	81 e2       	ldi	r24, 0x21	; 33
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     4bc:	89 ef       	ldi	r24, 0xF9	; 249
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <Lcd4_Cmd+0x26>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <Lcd4_Cmd+0x2c>
     4c6:	00 00       	nop
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	81 e2       	ldi	r24, 0x21	; 33
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     4d4:	89 ef       	ldi	r24, 0xF9	; 249
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	01 97       	sbiw	r24, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <Lcd4_Cmd+0x3e>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <Lcd4_Cmd+0x44>
     4de:	00 00       	nop
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <Lcd4_Clear>:
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     4f0:	08 95       	ret

000004f2 <Lcd4_Set_Cursor>:
     4f2:	cf 93       	push	r28
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	61 f4       	brne	.+24     	; 0x510 <Lcd4_Set_Cursor+0x1e>
     4f8:	80 e8       	ldi	r24, 0x80	; 128
     4fa:	86 0f       	add	r24, r22
     4fc:	c6 2f       	mov	r28, r22
     4fe:	cf 70       	andi	r28, 0x0F	; 15
     500:	82 95       	swap	r24
     502:	8f 70       	andi	r24, 0x0F	; 15
     504:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     508:	8c 2f       	mov	r24, r28
     50a:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     50e:	0d c0       	rjmp	.+26     	; 0x52a <Lcd4_Set_Cursor+0x38>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	59 f4       	brne	.+22     	; 0x52a <Lcd4_Set_Cursor+0x38>
     514:	80 ec       	ldi	r24, 0xC0	; 192
     516:	86 0f       	add	r24, r22
     518:	c6 2f       	mov	r28, r22
     51a:	cf 70       	andi	r28, 0x0F	; 15
     51c:	82 95       	swap	r24
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     524:	8c 2f       	mov	r24, r28
     526:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <Lcd4_Init>:
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 0d 02 	call	0x41a	; 0x41a <Lcd4_Port>
     534:	87 e8       	ldi	r24, 0x87	; 135
     536:	93 e1       	ldi	r25, 0x13	; 19
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <Lcd4_Init+0xa>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <Lcd4_Init+0x10>
     53e:	00 00       	nop
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     546:	81 ee       	ldi	r24, 0xE1	; 225
     548:	94 e0       	ldi	r25, 0x04	; 4
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <Lcd4_Init+0x1c>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <Lcd4_Init+0x22>
     550:	00 00       	nop
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     558:	8d eb       	ldi	r24, 0xBD	; 189
     55a:	9a e0       	ldi	r25, 0x0A	; 10
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <Lcd4_Init+0x2e>
     560:	00 c0       	rjmp	.+0      	; 0x562 <Lcd4_Init+0x34>
     562:	00 00       	nop
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     576:	88 e0       	ldi	r24, 0x08	; 8
     578:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     582:	8c e0       	ldi	r24, 0x0C	; 12
     584:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	0e 94 4d 02 	call	0x49a	; 0x49a <Lcd4_Cmd>
     594:	08 95       	ret

00000596 <Lcd4_Write_Char>:
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	d8 2f       	mov	r29, r24
     59c:	df 70       	andi	r29, 0x0F	; 15
     59e:	c8 2f       	mov	r28, r24
     5a0:	c0 7f       	andi	r28, 0xF0	; 240
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 e2       	ldi	r24, 0x20	; 32
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     5ae:	8c 2f       	mov	r24, r28
     5b0:	82 95       	swap	r24
     5b2:	8f 70       	andi	r24, 0x0F	; 15
     5b4:	0e 94 0d 02 	call	0x41a	; 0x41a <Lcd4_Port>
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	81 e2       	ldi	r24, 0x21	; 33
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     5c4:	89 ef       	ldi	r24, 0xF9	; 249
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <Lcd4_Write_Char+0x32>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <Lcd4_Write_Char+0x38>
     5ce:	00 00       	nop
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	81 e2       	ldi	r24, 0x21	; 33
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     5dc:	89 ef       	ldi	r24, 0xF9	; 249
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <Lcd4_Write_Char+0x4a>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <Lcd4_Write_Char+0x50>
     5e6:	00 00       	nop
     5e8:	8d 2f       	mov	r24, r29
     5ea:	0e 94 0d 02 	call	0x41a	; 0x41a <Lcd4_Port>
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	81 e2       	ldi	r24, 0x21	; 33
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     5fa:	89 ef       	ldi	r24, 0xF9	; 249
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <Lcd4_Write_Char+0x68>
     602:	00 c0       	rjmp	.+0      	; 0x604 <Lcd4_Write_Char+0x6e>
     604:	00 00       	nop
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	81 e2       	ldi	r24, 0x21	; 33
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 4d 00 	call	0x9a	; 0x9a <pinChange>
     612:	89 ef       	ldi	r24, 0xF9	; 249
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <Lcd4_Write_Char+0x80>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <Lcd4_Write_Char+0x86>
     61c:	00 00       	nop
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <Lcd4_Write_String>:
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	8c 01       	movw	r16, r24
     62e:	c0 e0       	ldi	r28, 0x00	; 0
     630:	d0 e0       	ldi	r29, 0x00	; 0
     632:	03 c0       	rjmp	.+6      	; 0x63a <Lcd4_Write_String+0x16>
     634:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
     638:	21 96       	adiw	r28, 0x01	; 1
     63a:	f8 01       	movw	r30, r16
     63c:	ec 0f       	add	r30, r28
     63e:	fd 1f       	adc	r31, r29
     640:	80 81       	ld	r24, Z
     642:	81 11       	cpse	r24, r1
     644:	f7 cf       	rjmp	.-18     	; 0x634 <Lcd4_Write_String+0x10>
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <doubleToString>:
int index;
char arr1[10];

void doubleToString(int resultInt, char *output, int fromIndex, int type)
{
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	8b 01       	movw	r16, r22
     65a:	fa 01       	movw	r30, r20
	int i = 0;
	
	if (type == TEMP || type == LIGHT)
     65c:	a9 01       	movw	r20, r18
     65e:	41 50       	subi	r20, 0x01	; 1
     660:	51 09       	sbc	r21, r1
     662:	42 30       	cpi	r20, 0x02	; 2
     664:	51 05       	cpc	r21, r1
     666:	e0 f5       	brcc	.+120    	; 0x6e0 <doubleToString+0x90>
	{
		if (resultInt < 0)
     668:	99 23       	and	r25, r25
     66a:	c4 f4       	brge	.+48     	; 0x69c <doubleToString+0x4c>
		{
			output[fromIndex++] = '-';
     66c:	9f 01       	movw	r18, r30
     66e:	2f 5f       	subi	r18, 0xFF	; 255
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	4d e2       	ldi	r20, 0x2D	; 45
     674:	db 01       	movw	r26, r22
     676:	ae 0f       	add	r26, r30
     678:	bf 1f       	adc	r27, r31
     67a:	4c 93       	st	X, r20
			
			if (resultInt > -10)
     67c:	87 3f       	cpi	r24, 0xF7	; 247
     67e:	4f ef       	ldi	r20, 0xFF	; 255
     680:	94 07       	cpc	r25, r20
     682:	3c f0       	brlt	.+14     	; 0x692 <doubleToString+0x42>
			{
				output[fromIndex++] = '0';
     684:	32 96       	adiw	r30, 0x02	; 2
     686:	db 01       	movw	r26, r22
     688:	a2 0f       	add	r26, r18
     68a:	b3 1f       	adc	r27, r19
     68c:	40 e3       	ldi	r20, 0x30	; 48
     68e:	4c 93       	st	X, r20
     690:	01 c0       	rjmp	.+2      	; 0x694 <doubleToString+0x44>
	
	if (type == TEMP || type == LIGHT)
	{
		if (resultInt < 0)
		{
			output[fromIndex++] = '-';
     692:	f9 01       	movw	r30, r18
			
			if (resultInt > -10)
			{
				output[fromIndex++] = '0';
			}
			resultInt = -resultInt;
     694:	91 95       	neg	r25
     696:	81 95       	neg	r24
     698:	91 09       	sbc	r25, r1
     69a:	4a c0       	rjmp	.+148    	; 0x730 <doubleToString+0xe0>
		}
		else {
			if (resultInt < 10) {
     69c:	8a 30       	cpi	r24, 0x0A	; 10
     69e:	91 05       	cpc	r25, r1
     6a0:	ac f4       	brge	.+42     	; 0x6cc <doubleToString+0x7c>
				
				output[fromIndex++] = '0';
     6a2:	40 e3       	ldi	r20, 0x30	; 48
     6a4:	db 01       	movw	r26, r22
     6a6:	ae 0f       	add	r26, r30
     6a8:	bf 1f       	adc	r27, r31
     6aa:	4c 93       	st	X, r20
				output[fromIndex++] = '0';
     6ac:	9f 01       	movw	r18, r30
     6ae:	2e 5f       	subi	r18, 0xFE	; 254
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	df 01       	movw	r26, r30
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	a6 0f       	add	r26, r22
     6b8:	b7 1f       	adc	r27, r23
     6ba:	4c 93       	st	X, r20
				if (resultInt == 0) output[fromIndex++] = '0';
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	b9 f5       	brne	.+110    	; 0x72e <doubleToString+0xde>
     6c0:	33 96       	adiw	r30, 0x03	; 3
     6c2:	db 01       	movw	r26, r22
     6c4:	a2 0f       	add	r26, r18
     6c6:	b3 1f       	adc	r27, r19
     6c8:	4c 93       	st	X, r20
     6ca:	32 c0       	rjmp	.+100    	; 0x730 <doubleToString+0xe0>
				
			}
			else if (resultInt < 100) output[fromIndex++] = '0';
     6cc:	84 36       	cpi	r24, 0x64	; 100
     6ce:	91 05       	cpc	r25, r1
     6d0:	7c f5       	brge	.+94     	; 0x730 <doubleToString+0xe0>
     6d2:	db 01       	movw	r26, r22
     6d4:	ae 0f       	add	r26, r30
     6d6:	bf 1f       	adc	r27, r31
     6d8:	20 e3       	ldi	r18, 0x30	; 48
     6da:	2c 93       	st	X, r18
     6dc:	31 96       	adiw	r30, 0x01	; 1
     6de:	28 c0       	rjmp	.+80     	; 0x730 <doubleToString+0xe0>
		}
		
		
	}
	else if (type == PEOPLE)
     6e0:	23 30       	cpi	r18, 0x03	; 3
     6e2:	31 05       	cpc	r19, r1
     6e4:	29 f5       	brne	.+74     	; 0x730 <doubleToString+0xe0>
	{
		if (resultInt < 10) output[fromIndex++] = '0';
     6e6:	8a 30       	cpi	r24, 0x0A	; 10
     6e8:	91 05       	cpc	r25, r1
     6ea:	34 f4       	brge	.+12     	; 0x6f8 <doubleToString+0xa8>
     6ec:	db 01       	movw	r26, r22
     6ee:	ae 0f       	add	r26, r30
     6f0:	bf 1f       	adc	r27, r31
     6f2:	20 e3       	ldi	r18, 0x30	; 48
     6f4:	2c 93       	st	X, r18
     6f6:	31 96       	adiw	r30, 0x01	; 1
		if (resultInt == 0) output[fromIndex++] = '0';
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	d1 f4       	brne	.+52     	; 0x730 <doubleToString+0xe0>
     6fc:	d8 01       	movw	r26, r16
     6fe:	ae 0f       	add	r26, r30
     700:	bf 1f       	adc	r27, r31
     702:	20 e3       	ldi	r18, 0x30	; 48
     704:	2c 93       	st	X, r18
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	13 c0       	rjmp	.+38     	; 0x730 <doubleToString+0xe0>
	}
	
	while (resultInt > 0)
	{
		arr1[i++] = (resultInt % 10) + '0';
     70a:	9e 01       	movw	r18, r28
     70c:	2f 5f       	subi	r18, 0xFF	; 255
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	6a e0       	ldi	r22, 0x0A	; 10
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__divmodhi4>
     718:	c3 54       	subi	r28, 0x43	; 67
     71a:	dd 4f       	sbci	r29, 0xFD	; 253
     71c:	80 5d       	subi	r24, 0xD0	; 208
     71e:	88 83       	st	Y, r24
		resultInt /= 10;
     720:	86 2f       	mov	r24, r22
     722:	97 2f       	mov	r25, r23
		if (i > 10) break;
     724:	2b 30       	cpi	r18, 0x0B	; 11
     726:	31 05       	cpc	r19, r1
     728:	4c f4       	brge	.+18     	; 0x73c <doubleToString+0xec>
		if (resultInt == 0) output[fromIndex++] = '0';
	}
	
	while (resultInt > 0)
	{
		arr1[i++] = (resultInt % 10) + '0';
     72a:	e9 01       	movw	r28, r18
     72c:	03 c0       	rjmp	.+6      	; 0x734 <doubleToString+0xe4>
		}
		else {
			if (resultInt < 10) {
				
				output[fromIndex++] = '0';
				output[fromIndex++] = '0';
     72e:	f9 01       	movw	r30, r18
		
	}
	else if (type == PEOPLE)
	{
		if (resultInt < 10) output[fromIndex++] = '0';
		if (resultInt == 0) output[fromIndex++] = '0';
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	while (resultInt > 0)
     734:	18 16       	cp	r1, r24
     736:	19 06       	cpc	r1, r25
     738:	44 f3       	brlt	.-48     	; 0x70a <doubleToString+0xba>
     73a:	9e 01       	movw	r18, r28
		arr1[i++] = (resultInt % 10) + '0';
		resultInt /= 10;
		if (i > 10) break;
	}
	
	for (int j = i - 1; j >= 0; j--)
     73c:	c9 01       	movw	r24, r18
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	0f c0       	rjmp	.+30     	; 0x760 <doubleToString+0x110>
	{
		output[fromIndex++] = arr1[j];
     742:	9f 01       	movw	r18, r30
     744:	2f 5f       	subi	r18, 0xFF	; 255
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	e0 0f       	add	r30, r16
     74a:	f1 1f       	adc	r31, r17
     74c:	dc 01       	movw	r26, r24
     74e:	a3 54       	subi	r26, 0x43	; 67
     750:	bd 4f       	sbci	r27, 0xFD	; 253
     752:	4c 91       	ld	r20, X
     754:	40 83       	st	Z, r20
		if (fromIndex > 10) break;
     756:	2b 30       	cpi	r18, 0x0B	; 11
     758:	31 05       	cpc	r19, r1
     75a:	2c f4       	brge	.+10     	; 0x766 <doubleToString+0x116>
		arr1[i++] = (resultInt % 10) + '0';
		resultInt /= 10;
		if (i > 10) break;
	}
	
	for (int j = i - 1; j >= 0; j--)
     75c:	01 97       	sbiw	r24, 0x01	; 1
	{
		output[fromIndex++] = arr1[j];
     75e:	f9 01       	movw	r30, r18
		arr1[i++] = (resultInt % 10) + '0';
		resultInt /= 10;
		if (i > 10) break;
	}
	
	for (int j = i - 1; j >= 0; j--)
     760:	99 23       	and	r25, r25
     762:	7c f7       	brge	.-34     	; 0x742 <doubleToString+0xf2>
     764:	01 c0       	rjmp	.+2      	; 0x768 <doubleToString+0x118>
	{
		output[fromIndex++] = arr1[j];
     766:	f9 01       	movw	r30, r18
		if (fromIndex > 10) break;
	}
	index = fromIndex;
     768:	f0 93 cb 02 	sts	0x02CB, r31	; 0x8002cb <index+0x1>
     76c:	e0 93 ca 02 	sts	0x02CA, r30	; 0x8002ca <index>
	
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	08 95       	ret

0000077a <intToString>:

void intToString(int val, char *output, int fromIndex)
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	eb 01       	movw	r28, r22
     780:	fa 01       	movw	r30, r20
	int i = 0;
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
	while (val > 0)
     786:	0d c0       	rjmp	.+26     	; 0x7a2 <intToString+0x28>
	{
		arr1[i++] = (val % 10) + '0';
     788:	6a e0       	ldi	r22, 0x0A	; 10
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__divmodhi4>
     790:	d9 01       	movw	r26, r18
     792:	a3 54       	subi	r26, 0x43	; 67
     794:	bd 4f       	sbci	r27, 0xFD	; 253
     796:	80 5d       	subi	r24, 0xD0	; 208
     798:	8c 93       	st	X, r24
		val /= 10;
     79a:	86 2f       	mov	r24, r22
     79c:	97 2f       	mov	r25, r23
void intToString(int val, char *output, int fromIndex)
{
	int i = 0;
	while (val > 0)
	{
		arr1[i++] = (val % 10) + '0';
     79e:	2f 5f       	subi	r18, 0xFF	; 255
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
}

void intToString(int val, char *output, int fromIndex)
{
	int i = 0;
	while (val > 0)
     7a2:	18 16       	cp	r1, r24
     7a4:	19 06       	cpc	r1, r25
     7a6:	84 f3       	brlt	.-32     	; 0x788 <intToString+0xe>
	{
		arr1[i++] = (val % 10) + '0';
		val /= 10;
	}
	
	for (int j = i - 1; j >= 0; j--)
     7a8:	c9 01       	movw	r24, r18
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <intToString+0x4c>
	{
		output[fromIndex++] = arr1[j];
     7ae:	ae 01       	movw	r20, r28
     7b0:	4e 0f       	add	r20, r30
     7b2:	5f 1f       	adc	r21, r31
     7b4:	9c 01       	movw	r18, r24
     7b6:	23 54       	subi	r18, 0x43	; 67
     7b8:	3d 4f       	sbci	r19, 0xFD	; 253
     7ba:	d9 01       	movw	r26, r18
     7bc:	2c 91       	ld	r18, X
     7be:	da 01       	movw	r26, r20
     7c0:	2c 93       	st	X, r18
	{
		arr1[i++] = (val % 10) + '0';
		val /= 10;
	}
	
	for (int j = i - 1; j >= 0; j--)
     7c2:	01 97       	sbiw	r24, 0x01	; 1
	{
		output[fromIndex++] = arr1[j];
     7c4:	31 96       	adiw	r30, 0x01	; 1
	{
		arr1[i++] = (val % 10) + '0';
		val /= 10;
	}
	
	for (int j = i - 1; j >= 0; j--)
     7c6:	99 23       	and	r25, r25
     7c8:	94 f7       	brge	.-28     	; 0x7ae <intToString+0x34>
	{
		output[fromIndex++] = arr1[j];
	}
	index = fromIndex;
     7ca:	f0 93 cb 02 	sts	0x02CB, r31	; 0x8002cb <index+0x1>
     7ce:	e0 93 ca 02 	sts	0x02CA, r30	; 0x8002ca <index>
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <__vector_16>:
unsigned char enteredPassowrdLength = 0, newPasswordLength = 0, passwordLength = 4;
volatile unsigned char humanCountAdjust = 0, windowState = 0;


ISR(ADC_vect)
{
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	11 24       	eor	r1, r1
     7e2:	cf 92       	push	r12
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
	adc = ADC;
     802:	84 b1       	in	r24, 0x04	; 4
     804:	95 b1       	in	r25, 0x05	; 5
     806:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <adc+0x1>
     80a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <adc>
	admux = ADMUX ;
     80e:	87 b1       	in	r24, 0x07	; 7
     810:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <admux>
	admux <<= 5;
     814:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <admux>
     818:	82 95       	swap	r24
     81a:	88 0f       	add	r24, r24
     81c:	80 7e       	andi	r24, 0xE0	; 224
     81e:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <admux>
	admux >>= 5;
     822:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <admux>
     826:	82 95       	swap	r24
     828:	86 95       	lsr	r24
     82a:	87 70       	andi	r24, 0x07	; 7
     82c:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <admux>
	
	if (admux == 0)
     830:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <admux>
     834:	81 11       	cpse	r24, r1
     836:	20 c0       	rjmp	.+64     	; 0x878 <__stack+0x19>
	{
		temperature = adc * multiplier;
     838:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <adc>
     83c:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <adc+0x1>
     840:	c0 90 b3 00 	lds	r12, 0x00B3	; 0x8000b3 <multiplier>
     844:	d0 90 b4 00 	lds	r13, 0x00B4	; 0x8000b4 <multiplier+0x1>
     848:	e0 90 b5 00 	lds	r14, 0x00B5	; 0x8000b5 <multiplier+0x2>
     84c:	f0 90 b6 00 	lds	r15, 0x00B6	; 0x8000b6 <multiplier+0x3>
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__floatunsisf>
     858:	a7 01       	movw	r20, r14
     85a:	96 01       	movw	r18, r12
     85c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__mulsf3>
     860:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <temperature>
     864:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <temperature+0x1>
     868:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <temperature+0x2>
     86c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <temperature+0x3>
		ADMUX |= 1;
     870:	87 b1       	in	r24, 0x07	; 7
     872:	81 60       	ori	r24, 0x01	; 1
     874:	87 b9       	out	0x07, r24	; 7
     876:	34 c0       	rjmp	.+104    	; 0x8e0 <__stack+0x81>
	}
	else if (admux == 1)
     878:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <admux>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	81 f5       	brne	.+96     	; 0x8e0 <__stack+0x81>
	{
		light = adc;
     880:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <adc>
     884:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <adc+0x1>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__floatunsisf>
     890:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <light>
     894:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <light+0x1>
     898:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <light+0x2>
     89c:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <light+0x3>
		ADMUX ^= 1;
     8a0:	97 b1       	in	r25, 0x07	; 7
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	89 27       	eor	r24, r25
     8a6:	87 b9       	out	0x07, r24	; 7
		light = (1050 - light) / 10;
     8a8:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <light>
     8ac:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <light+0x1>
     8b0:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <light+0x2>
     8b4:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <light+0x3>
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e4       	ldi	r23, 0x40	; 64
     8bc:	83 e8       	ldi	r24, 0x83	; 131
     8be:	94 e4       	ldi	r25, 0x44	; 68
     8c0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__subsf3>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e2       	ldi	r20, 0x20	; 32
     8ca:	51 e4       	ldi	r21, 0x41	; 65
     8cc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__divsf3>
     8d0:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <light>
     8d4:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <light+0x1>
     8d8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <light+0x2>
     8dc:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <light+0x3>
	}
	
	ADCSRA |= (1 << ADSC);
     8e0:	86 b1       	in	r24, 0x06	; 6
     8e2:	80 64       	ori	r24, 0x40	; 64
     8e4:	86 b9       	out	0x06, r24	; 6
	
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_3>:

ISR(INT2_vect) {
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	8f 93       	push	r24
	keyInput = 1;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <keyInput>
}
     922:	8f 91       	pop	r24
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti

0000092e <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	8f 93       	push	r24
	overflowCount++;
     93a:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <overflowCount>
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <overflowCount>
	if (overflowCount == 15)
     944:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <overflowCount>
     948:	8f 30       	cpi	r24, 0x0F	; 15
     94a:	39 f4       	brne	.+14     	; 0x95a <__vector_9+0x2c>
	{
		overflowCount = 0;
     94c:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
		timeInterval++;
     950:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
     954:	8f 5f       	subi	r24, 0xFF	; 255
     956:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <timeInterval>
	}
}
     95a:	8f 91       	pop	r24
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <windowControl>:
	}
}

void windowControl()
{
	if (windowState == 1)
     966:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <windowState>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	a9 f4       	brne	.+42     	; 0x998 <windowControl+0x32>
	{
		PORTB &= 0b00111111;
     96e:	88 b3       	in	r24, 0x18	; 24
     970:	8f 73       	andi	r24, 0x3F	; 63
     972:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b01000000;
     974:	88 b3       	in	r24, 0x18	; 24
     976:	80 64       	ori	r24, 0x40	; 64
     978:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
     97a:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		overflowCount = 0;
     97e:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
		while (timeInterval == 0){}
     982:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
     986:	88 23       	and	r24, r24
     988:	e1 f3       	breq	.-8      	; 0x982 <windowControl+0x1c>
		PORTB &= 0b00111111;
     98a:	88 b3       	in	r24, 0x18	; 24
     98c:	8f 73       	andi	r24, 0x3F	; 63
     98e:	88 bb       	out	0x18, r24	; 24
		windowState = 2;
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <windowState>
     996:	08 95       	ret
	}
	else if (windowState == 3)
     998:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <windowState>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	99 f4       	brne	.+38     	; 0x9c6 <windowControl+0x60>
	{
		PORTB &= 0b00111111;
     9a0:	88 b3       	in	r24, 0x18	; 24
     9a2:	8f 73       	andi	r24, 0x3F	; 63
     9a4:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b10000000;
     9a6:	88 b3       	in	r24, 0x18	; 24
     9a8:	80 68       	ori	r24, 0x80	; 128
     9aa:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
     9ac:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		overflowCount = 0;
     9b0:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
		while (timeInterval == 0){}
     9b4:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
     9b8:	88 23       	and	r24, r24
     9ba:	e1 f3       	breq	.-8      	; 0x9b4 <windowControl+0x4e>
		PORTB &= 0b00111111;
     9bc:	88 b3       	in	r24, 0x18	; 24
     9be:	8f 73       	andi	r24, 0x3F	; 63
     9c0:	88 bb       	out	0x18, r24	; 24
		windowState = 0;
     9c2:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <windowState>
     9c6:	08 95       	ret

000009c8 <show_LCD_default>:
	}
}

void show_LCD_default()
{
	Lcd4_Clear();
     9c8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
	
	Lcd4_Set_Cursor(1, 1);
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
	if (tempAutomatic) Lcd4_Write_String("T-A:");
     9d4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
     9d8:	88 23       	and	r24, r24
     9da:	29 f0       	breq	.+10     	; 0x9e6 <show_LCD_default+0x1e>
     9dc:	8f eb       	ldi	r24, 0xBF	; 191
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <show_LCD_default+0x26>
	else Lcd4_Write_String("T-M:");
     9e6:	84 ec       	ldi	r24, 0xC4	; 196
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
	
	Lcd4_Set_Cursor(1, 8);
     9ee:	68 e0       	ldi	r22, 0x08	; 8
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
	Lcd4_Write_String("-");
     9f6:	89 ec       	ldi	r24, 0xC9	; 201
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
	Lcd4_Set_Cursor(1, 9);
     9fe:	69 e0       	ldi	r22, 0x09	; 9
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
	intToString(tempThreshold, output1, 0);
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	68 eb       	ldi	r22, 0xB8	; 184
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempThreshold>
     a12:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <tempThreshold+0x1>
     a16:	0e 94 bd 03 	call	0x77a	; 0x77a <intToString>
	output1[index] = '\0';
     a1a:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     a1e:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     a22:	e8 54       	subi	r30, 0x48	; 72
     a24:	fd 4f       	sbci	r31, 0xFD	; 253
     a26:	10 82       	st	Z, r1
	Lcd4_Write_String(output1);
     a28:	88 eb       	ldi	r24, 0xB8	; 184
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
	
	Lcd4_Set_Cursor(2, 1);
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
	
	if (lightAutomatic) Lcd4_Write_String("L-A:");
     a38:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
     a3c:	88 23       	and	r24, r24
     a3e:	29 f0       	breq	.+10     	; 0xa4a <show_LCD_default+0x82>
     a40:	8b ec       	ldi	r24, 0xCB	; 203
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <show_LCD_default+0x8a>
	else (Lcd4_Write_String("L-M:"));
     a4a:	80 ed       	ldi	r24, 0xD0	; 208
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
	
	Lcd4_Set_Cursor(2, 8);
     a52:	68 e0       	ldi	r22, 0x08	; 8
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
	Lcd4_Write_String("-");
     a5a:	89 ec       	ldi	r24, 0xC9	; 201
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2, 9);
     a62:	69 e0       	ldi	r22, 0x09	; 9
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
	intToString(lightThreshold, output1, 0);
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	68 eb       	ldi	r22, 0xB8	; 184
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <lightThreshold>
     a76:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <lightThreshold+0x1>
     a7a:	0e 94 bd 03 	call	0x77a	; 0x77a <intToString>
	output1[index] = '\0';
     a7e:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     a82:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     a86:	e8 54       	subi	r30, 0x48	; 72
     a88:	fd 4f       	sbci	r31, 0xFD	; 253
     a8a:	10 82       	st	Z, r1
	Lcd4_Write_String(output1);
     a8c:	88 eb       	ldi	r24, 0xB8	; 184
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     a94:	08 95       	ret

00000a96 <keyboardInput>:
}


void keyboardInput()
{
	char inputNumber = PINC & 0b00001111;
     a96:	83 b3       	in	r24, 0x13	; 19
     a98:	8f 70       	andi	r24, 0x0F	; 15
	keyInput = 0;
     a9a:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <keyInput>
	
	if (inputNumber == 15)
     a9e:	8f 30       	cpi	r24, 0x0F	; 15
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <keyboardInput+0xe>
     aa2:	a1 c0       	rjmp	.+322    	; 0xbe6 <keyboardInput+0x150>
	{
		x = 'z';
     aa4:	8a e7       	ldi	r24, 0x7A	; 122
     aa6:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		if (tempThresholdChange)
     aaa:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <tempThresholdChange>
     aae:	88 23       	and	r24, r24
     ab0:	99 f0       	breq	.+38     	; 0xad8 <keyboardInput+0x42>
		{
			Lcd4_Clear();
     ab2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,1);
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String("closing temp. threshold change mode");
     abe:	85 ed       	ldi	r24, 0xD5	; 213
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac6:	8b e4       	ldi	r24, 0x4B	; 75
     ac8:	9d e1       	ldi	r25, 0x1D	; 29
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <keyboardInput+0x34>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <keyboardInput+0x3a>
     ad0:	00 00       	nop
			_delay_ms(30);
			show_LCD_default();
     ad2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
     ad6:	7e c0       	rjmp	.+252    	; 0xbd4 <keyboardInput+0x13e>
		}
		else if ( lightThresholdChange)
     ad8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <lightThresholdChange>
     adc:	88 23       	and	r24, r24
     ade:	99 f0       	breq	.+38     	; 0xb06 <keyboardInput+0x70>
		{
			Lcd4_Clear();
     ae0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,1);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String("closing light threshold change mode");
     aec:	89 ef       	ldi	r24, 0xF9	; 249
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     af4:	8b e4       	ldi	r24, 0x4B	; 75
     af6:	9d e1       	ldi	r25, 0x1D	; 29
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <keyboardInput+0x62>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <keyboardInput+0x68>
     afe:	00 00       	nop
			_delay_ms(30);
			show_LCD_default();
     b00:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
     b04:	67 c0       	rjmp	.+206    	; 0xbd4 <keyboardInput+0x13e>
		}
		else if (humanCountAdjust)
     b06:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <humanCountAdjust>
     b0a:	88 23       	and	r24, r24
     b0c:	99 f0       	breq	.+38     	; 0xb34 <keyboardInput+0x9e>
		{
			Lcd4_Clear();
     b0e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,1);
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String("Human count adjusted");
     b1a:	8d e1       	ldi	r24, 0x1D	; 29
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     b22:	8b e4       	ldi	r24, 0x4B	; 75
     b24:	9d e1       	ldi	r25, 0x1D	; 29
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <keyboardInput+0x90>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <keyboardInput+0x96>
     b2c:	00 00       	nop
			_delay_ms(30);
			show_LCD_default();
     b2e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
     b32:	50 c0       	rjmp	.+160    	; 0xbd4 <keyboardInput+0x13e>
		}
		else if (doorOpenState == 3 && passwordGiven == 0)
     b34:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	09 f0       	breq	.+2      	; 0xb3e <keyboardInput+0xa8>
     b3c:	4b c0       	rjmp	.+150    	; 0xbd4 <keyboardInput+0x13e>
     b3e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     b42:	81 11       	cpse	r24, r1
     b44:	47 c0       	rjmp	.+142    	; 0xbd4 <keyboardInput+0x13e>
		{
			enteredPassowrd[startIndex++] = '\0';
     b46:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8e 0f       	add	r24, r30
     b4e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	e4 53       	subi	r30, 0x34	; 52
     b56:	fd 4f       	sbci	r31, 0xFD	; 253
     b58:	10 82       	st	Z, r1
			unsigned char passwordOk = 1;
			
			if (passwordLength != enteredPassowrdLength)
     b5a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <passwordLength>
     b5e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     b62:	98 13       	cpse	r25, r24
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <keyboardInput+0xd4>
			show_LCD_default();
		}
		else if (doorOpenState == 3 && passwordGiven == 0)
		{
			enteredPassowrd[startIndex++] = '\0';
			unsigned char passwordOk = 1;
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <keyboardInput+0xd6>
			
			if (passwordLength != enteredPassowrdLength)
			{
				passwordOk = 0;
     b6a:	40 e0       	ldi	r20, 0x00	; 0
			}
			
			for (int i = 0; password[i]; i++)
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	07 c0       	rjmp	.+14     	; 0xb80 <keyboardInput+0xea>
			{
				if (password[i] != enteredPassowrd[i]) {
     b72:	fc 01       	movw	r30, r24
     b74:	e4 53       	subi	r30, 0x34	; 52
     b76:	fd 4f       	sbci	r31, 0xFD	; 253
     b78:	30 81       	ld	r19, Z
     b7a:	23 13       	cpse	r18, r19
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <keyboardInput+0xf8>
			if (passwordLength != enteredPassowrdLength)
			{
				passwordOk = 0;
			}
			
			for (int i = 0; password[i]; i++)
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	fc 01       	movw	r30, r24
     b82:	e5 58       	subi	r30, 0x85	; 133
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	20 81       	ld	r18, Z
     b88:	21 11       	cpse	r18, r1
     b8a:	f3 cf       	rjmp	.-26     	; 0xb72 <keyboardInput+0xdc>
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <keyboardInput+0xfa>
			{
				if (password[i] != enteredPassowrd[i]) {
					passwordOk = 0;
     b8e:	40 e0       	ldi	r20, 0x00	; 0
					break;
				}
			}
			
			if (passwordOk)
     b90:	44 23       	and	r20, r20
     b92:	21 f0       	breq	.+8      	; 0xb9c <keyboardInput+0x106>
			{
				passwordGiven = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <passwordGiven>
     b9a:	1c c0       	rjmp	.+56     	; 0xbd4 <keyboardInput+0x13e>
			}
			else
			{
				Lcd4_Clear();
     b9c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,1);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
				Lcd4_Write_String("Wrong Password!");
     ba8:	82 e3       	ldi	r24, 0x32	; 50
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     bb0:	8b e4       	ldi	r24, 0x4B	; 75
     bb2:	9d e1       	ldi	r25, 0x1D	; 29
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <keyboardInput+0x11e>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <keyboardInput+0x124>
     bba:	00 00       	nop
				_delay_ms(30);
				Lcd4_Clear();
     bbc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,1);
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
				Lcd4_Write_String("Enter Password: ");
     bc8:	82 e4       	ldi	r24, 0x42	; 66
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
				startIndex = 0;
     bd0:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <startIndex>
			}
		}
		
		lightThresholdChange = 0;
     bd4:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <lightThresholdChange>
		tempThresholdChange = 0;
     bd8:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <tempThresholdChange>
		humanCountAdjust = 0;
     bdc:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <humanCountAdjust>
		enteredPassowrdLength = 0;
     be0:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <enteredPassowrdLength>
     be4:	08 95       	ret
	}
	else if (inputNumber == 8)
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	09 f0       	breq	.+2      	; 0xbec <keyboardInput+0x156>
     bea:	a7 c0       	rjmp	.+334    	; 0xd3a <keyboardInput+0x2a4>
	{
		
		
		x = '-';
     bec:	8d e2       	ldi	r24, 0x2D	; 45
     bee:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
     bf2:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	c1 f4       	brne	.+48     	; 0xc2a <keyboardInput+0x194>
     bfa:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     bfe:	81 11       	cpse	r24, r1
     c00:	14 c0       	rjmp	.+40     	; 0xc2a <keyboardInput+0x194>
		{
			enteredPassowrd[startIndex++] = '-';
     c02:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8e 0f       	add	r24, r30
     c0a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	e4 53       	subi	r30, 0x34	; 52
     c12:	fd 4f       	sbci	r31, 0xFD	; 253
     c14:	8d e2       	ldi	r24, 0x2D	; 45
     c16:	80 83       	st	Z, r24
			enteredPassowrdLength++;
     c18:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
     c22:	8a e2       	ldi	r24, 0x2A	; 42
     c24:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
     c28:	08 95       	ret
		}
		
		if (tempThresholdChange)
     c2a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <tempThresholdChange>
     c2e:	88 23       	and	r24, r24
     c30:	59 f1       	breq	.+86     	; 0xc88 <keyboardInput+0x1f2>
		{
			//Lcd4_Write_String("Temperature Threshold: ");
			tempThreshold--;
     c32:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempThreshold>
     c36:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <tempThreshold+0x1>
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <tempThreshold+0x1>
     c40:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <tempThreshold>
			
			if (tempThreshold < 0) tempThreshold = 0;
     c44:	99 23       	and	r25, r25
     c46:	24 f4       	brge	.+8      	; 0xc50 <keyboardInput+0x1ba>
     c48:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <tempThreshold+0x1>
     c4c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <tempThreshold>
			
			Lcd4_Set_Cursor(1, 9);
     c50:	69 e0       	ldi	r22, 0x09	; 9
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			doubleToString(tempThreshold, output1, 0, TEMP);
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	68 eb       	ldi	r22, 0xB8	; 184
     c62:	72 e0       	ldi	r23, 0x02	; 2
     c64:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempThreshold>
     c68:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <tempThreshold+0x1>
     c6c:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output1[index] = '\0';
     c70:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     c74:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     c78:	e8 54       	subi	r30, 0x48	; 72
     c7a:	fd 4f       	sbci	r31, 0xFD	; 253
     c7c:	10 82       	st	Z, r1
			Lcd4_Write_String(output1);
     c7e:	88 eb       	ldi	r24, 0xB8	; 184
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     c86:	08 95       	ret
			
		}
		else if (lightThresholdChange)
     c88:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <lightThresholdChange>
     c8c:	88 23       	and	r24, r24
     c8e:	59 f1       	breq	.+86     	; 0xce6 <keyboardInput+0x250>
		{
			lightThreshold -= 5; 
     c90:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <lightThreshold>
     c94:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <lightThreshold+0x1>
     c98:	05 97       	sbiw	r24, 0x05	; 5
     c9a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <lightThreshold+0x1>
     c9e:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <lightThreshold>
			if (lightThreshold < 0) lightThreshold = 0;
     ca2:	99 23       	and	r25, r25
     ca4:	24 f4       	brge	.+8      	; 0xcae <keyboardInput+0x218>
     ca6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <lightThreshold+0x1>
     caa:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <lightThreshold>
			
			Lcd4_Set_Cursor(2, 9);
     cae:	69 e0       	ldi	r22, 0x09	; 9
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			doubleToString(lightThreshold, output1, 0, LIGHT);
     cb6:	22 e0       	ldi	r18, 0x02	; 2
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	68 eb       	ldi	r22, 0xB8	; 184
     cc0:	72 e0       	ldi	r23, 0x02	; 2
     cc2:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <lightThreshold>
     cc6:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <lightThreshold+0x1>
     cca:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output1[index] = '\0';
     cce:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     cd2:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     cd6:	e8 54       	subi	r30, 0x48	; 72
     cd8:	fd 4f       	sbci	r31, 0xFD	; 253
     cda:	10 82       	st	Z, r1
			Lcd4_Write_String(output1);
     cdc:	88 eb       	ldi	r24, 0xB8	; 184
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     ce4:	08 95       	ret
		}
		else if (humanCountAdjust)
     ce6:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <humanCountAdjust>
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <keyboardInput+0x25a>
     cee:	1b c3       	rjmp	.+1590   	; 0x1326 <keyboardInput+0x890>
		{
			humancount--;
     cf0:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
     cf4:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <humancount+0x1>
     cfe:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <humancount>
			Lcd4_Set_Cursor(1, 13);
     d02:	6d e0       	ldi	r22, 0x0D	; 13
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			doubleToString(humancount, output1, 0, PEOPLE);
     d0a:	23 e0       	ldi	r18, 0x03	; 3
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	68 eb       	ldi	r22, 0xB8	; 184
     d14:	72 e0       	ldi	r23, 0x02	; 2
     d16:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
     d1a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
     d1e:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output1[index] = '\0';
     d22:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     d26:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     d2a:	e8 54       	subi	r30, 0x48	; 72
     d2c:	fd 4f       	sbci	r31, 0xFD	; 253
     d2e:	10 82       	st	Z, r1
			Lcd4_Write_String(output1);
     d30:	88 eb       	ldi	r24, 0xB8	; 184
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     d38:	08 95       	ret
		}
	}
	else if (inputNumber == 12)
     d3a:	8c 30       	cpi	r24, 0x0C	; 12
     d3c:	09 f0       	breq	.+2      	; 0xd40 <keyboardInput+0x2aa>
     d3e:	9b c0       	rjmp	.+310    	; 0xe76 <keyboardInput+0x3e0>
	{
		x = '+';
     d40:	8b e2       	ldi	r24, 0x2B	; 43
     d42:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
     d46:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	c1 f4       	brne	.+48     	; 0xd7e <keyboardInput+0x2e8>
     d4e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     d52:	81 11       	cpse	r24, r1
     d54:	14 c0       	rjmp	.+40     	; 0xd7e <keyboardInput+0x2e8>
		{
			enteredPassowrd[startIndex++] = '+';
     d56:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8e 0f       	add	r24, r30
     d5e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e4 53       	subi	r30, 0x34	; 52
     d66:	fd 4f       	sbci	r31, 0xFD	; 253
     d68:	8b e2       	ldi	r24, 0x2B	; 43
     d6a:	80 83       	st	Z, r24
			Lcd4_Write_Char('*');
     d6c:	8a e2       	ldi	r24, 0x2A	; 42
     d6e:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			enteredPassowrdLength++;
     d72:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			return;
     d7c:	08 95       	ret
		}
		
		if (tempThresholdChange)
     d7e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <tempThresholdChange>
     d82:	88 23       	and	r24, r24
     d84:	29 f1       	breq	.+74     	; 0xdd0 <keyboardInput+0x33a>
		{
			//Lcd4_Write_String("Temperature Threshold: ");
			tempThreshold++;
     d86:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempThreshold>
     d8a:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <tempThreshold+0x1>
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <tempThreshold+0x1>
     d94:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <tempThreshold>
			Lcd4_Set_Cursor(1, 9);
     d98:	69 e0       	ldi	r22, 0x09	; 9
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			doubleToString(tempThreshold, output1, 0, TEMP);
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	68 eb       	ldi	r22, 0xB8	; 184
     daa:	72 e0       	ldi	r23, 0x02	; 2
     dac:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <tempThreshold>
     db0:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <tempThreshold+0x1>
     db4:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output1[index] = '\0';
     db8:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     dbc:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     dc0:	e8 54       	subi	r30, 0x48	; 72
     dc2:	fd 4f       	sbci	r31, 0xFD	; 253
     dc4:	10 82       	st	Z, r1
			Lcd4_Write_String(output1);
     dc6:	88 eb       	ldi	r24, 0xB8	; 184
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     dce:	08 95       	ret
			
		}
		else if (lightThresholdChange)
     dd0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <lightThresholdChange>
     dd4:	88 23       	and	r24, r24
     dd6:	29 f1       	breq	.+74     	; 0xe22 <keyboardInput+0x38c>
		{
			lightThreshold+= 5;
     dd8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <lightThreshold>
     ddc:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <lightThreshold+0x1>
     de0:	05 96       	adiw	r24, 0x05	; 5
     de2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <lightThreshold+0x1>
     de6:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <lightThreshold>
			Lcd4_Set_Cursor(2, 9);
     dea:	69 e0       	ldi	r22, 0x09	; 9
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			doubleToString(lightThreshold, output1, 0, LIGHT);
     df2:	22 e0       	ldi	r18, 0x02	; 2
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	68 eb       	ldi	r22, 0xB8	; 184
     dfc:	72 e0       	ldi	r23, 0x02	; 2
     dfe:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <lightThreshold>
     e02:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <lightThreshold+0x1>
     e06:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output1[index] = '\0';
     e0a:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     e0e:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     e12:	e8 54       	subi	r30, 0x48	; 72
     e14:	fd 4f       	sbci	r31, 0xFD	; 253
     e16:	10 82       	st	Z, r1
			Lcd4_Write_String(output1);
     e18:	88 eb       	ldi	r24, 0xB8	; 184
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     e20:	08 95       	ret
		}
		else if (humanCountAdjust)
     e22:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <humanCountAdjust>
     e26:	88 23       	and	r24, r24
     e28:	09 f4       	brne	.+2      	; 0xe2c <keyboardInput+0x396>
     e2a:	7d c2       	rjmp	.+1274   	; 0x1326 <keyboardInput+0x890>
		{
			humancount++;
     e2c:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
     e30:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <humancount+0x1>
     e3a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <humancount>
			Lcd4_Set_Cursor(1, 13);
     e3e:	6d e0       	ldi	r22, 0x0D	; 13
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			doubleToString(humancount, output1, 0, PEOPLE);
     e46:	23 e0       	ldi	r18, 0x03	; 3
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e0       	ldi	r20, 0x00	; 0
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	68 eb       	ldi	r22, 0xB8	; 184
     e50:	72 e0       	ldi	r23, 0x02	; 2
     e52:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
     e56:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
     e5a:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output1[index] = '\0';
     e5e:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
     e62:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
     e66:	e8 54       	subi	r30, 0x48	; 72
     e68:	fd 4f       	sbci	r31, 0xFD	; 253
     e6a:	10 82       	st	Z, r1
			Lcd4_Write_String(output1);
     e6c:	88 eb       	ldi	r24, 0xB8	; 184
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     e74:	08 95       	ret
		}
	}
	
	else if (inputNumber == 14)
     e76:	8e 30       	cpi	r24, 0x0E	; 14
     e78:	09 f0       	breq	.+2      	; 0xe7c <keyboardInput+0x3e6>
     e7a:	40 c0       	rjmp	.+128    	; 0xefc <keyboardInput+0x466>
	{
		x = '0';
     e7c:	80 e3       	ldi	r24, 0x30	; 48
     e7e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
     e82:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	c1 f4       	brne	.+48     	; 0xeba <keyboardInput+0x424>
     e8a:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     e8e:	81 11       	cpse	r24, r1
     e90:	14 c0       	rjmp	.+40     	; 0xeba <keyboardInput+0x424>
		{
			enteredPassowrd[startIndex++] = '0';
     e92:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	8e 0f       	add	r24, r30
     e9a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	e4 53       	subi	r30, 0x34	; 52
     ea2:	fd 4f       	sbci	r31, 0xFD	; 253
     ea4:	80 e3       	ldi	r24, 0x30	; 48
     ea6:	80 83       	st	Z, r24
			enteredPassowrdLength++;
     ea8:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
     eb2:	8a e2       	ldi	r24, 0x2A	; 42
     eb4:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
     eb8:	08 95       	ret
		}
		
		Lcd4_Clear();
     eba:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		
		if (tempAutomatic)
     ec6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
     eca:	88 23       	and	r24, r24
     ecc:	39 f0       	breq	.+14     	; 0xedc <keyboardInput+0x446>
		{
			Lcd4_Write_String("Temperature Manual");
     ece:	83 e5       	ldi	r24, 0x53	; 83
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			tempAutomatic = 0;
     ed6:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <tempAutomatic>
     eda:	07 c0       	rjmp	.+14     	; 0xeea <keyboardInput+0x454>
		}
		else 
		{
			Lcd4_Write_String("Temperature Automatic");
     edc:	86 e6       	ldi	r24, 0x66	; 102
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			tempAutomatic = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <tempAutomatic>
     eea:	8b e4       	ldi	r24, 0x4B	; 75
     eec:	9d e1       	ldi	r25, 0x1D	; 29
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <keyboardInput+0x458>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <keyboardInput+0x45e>
     ef4:	00 00       	nop
		}
		_delay_ms(30);
		
		show_LCD_default();
     ef6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
     efa:	08 95       	ret
	}
	else if (inputNumber == 11)
     efc:	8b 30       	cpi	r24, 0x0B	; 11
     efe:	41 f5       	brne	.+80     	; 0xf50 <keyboardInput+0x4ba>
	{
		x = '1';
     f00:	81 e3       	ldi	r24, 0x31	; 49
     f02:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
     f06:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	c1 f4       	brne	.+48     	; 0xf3e <keyboardInput+0x4a8>
     f0e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     f12:	81 11       	cpse	r24, r1
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <keyboardInput+0x4a8>
		{
			enteredPassowrd[startIndex++] = '1';
     f16:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	8e 0f       	add	r24, r30
     f1e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e4 53       	subi	r30, 0x34	; 52
     f26:	fd 4f       	sbci	r31, 0xFD	; 253
     f28:	81 e3       	ldi	r24, 0x31	; 49
     f2a:	80 83       	st	Z, r24
			Lcd4_Write_Char('*');
     f2c:	8a e2       	ldi	r24, 0x2A	; 42
     f2e:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			enteredPassowrdLength++;
     f32:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     f36:	8f 5f       	subi	r24, 0xFF	; 255
     f38:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			return;
     f3c:	08 95       	ret
		}
		
		if (tempAutomatic == 0)
     f3e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
     f42:	81 11       	cpse	r24, r1
     f44:	f0 c1       	rjmp	.+992    	; 0x1326 <keyboardInput+0x890>
		{
			PORTB ^= 0b00000001;
     f46:	98 b3       	in	r25, 0x18	; 24
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	89 27       	eor	r24, r25
     f4c:	88 bb       	out	0x18, r24	; 24
     f4e:	08 95       	ret
		}
	}
	else if (inputNumber == 10)
     f50:	8a 30       	cpi	r24, 0x0A	; 10
     f52:	a9 f5       	brne	.+106    	; 0xfbe <keyboardInput+0x528>
	{
		x = '2';
     f54:	82 e3       	ldi	r24, 0x32	; 50
     f56:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
     f5a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	c1 f4       	brne	.+48     	; 0xf92 <keyboardInput+0x4fc>
     f62:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     f66:	81 11       	cpse	r24, r1
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <keyboardInput+0x4fc>
		{
			enteredPassowrd[startIndex++] = '2';
     f6a:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	8e 0f       	add	r24, r30
     f72:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	e4 53       	subi	r30, 0x34	; 52
     f7a:	fd 4f       	sbci	r31, 0xFD	; 253
     f7c:	82 e3       	ldi	r24, 0x32	; 50
     f7e:	80 83       	st	Z, r24
			enteredPassowrdLength++;
     f80:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
     f8a:	8a e2       	ldi	r24, 0x2A	; 42
     f8c:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
     f90:	08 95       	ret
		}
		
		tempThresholdChange = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <tempThresholdChange>
		Lcd4_Clear();
     f98:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("+/- to change temperature threshold");
     fa4:	8c e7       	ldi	r24, 0x7C	; 124
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
     fac:	8b e4       	ldi	r24, 0x4B	; 75
     fae:	9d e1       	ldi	r25, 0x1D	; 29
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <keyboardInput+0x51a>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <keyboardInput+0x520>
     fb6:	00 00       	nop
		_delay_ms(30);
		show_LCD_default();
     fb8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
     fbc:	08 95       	ret
	}
	else if (inputNumber == 9)
     fbe:	89 30       	cpi	r24, 0x09	; 9
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <keyboardInput+0x52e>
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <keyboardInput+0x5ae>
	{
		x = '3';
     fc4:	83 e3       	ldi	r24, 0x33	; 51
     fc6:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
     fca:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	c1 f4       	brne	.+48     	; 0x1002 <keyboardInput+0x56c>
     fd2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
     fd6:	81 11       	cpse	r24, r1
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <keyboardInput+0x56c>
		{
			enteredPassowrd[startIndex++] = '3';
     fda:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8e 0f       	add	r24, r30
     fe2:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	e4 53       	subi	r30, 0x34	; 52
     fea:	fd 4f       	sbci	r31, 0xFD	; 253
     fec:	83 e3       	ldi	r24, 0x33	; 51
     fee:	80 83       	st	Z, r24
			Lcd4_Write_Char('*');
     ff0:	8a e2       	ldi	r24, 0x2A	; 42
     ff2:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			enteredPassowrdLength++;
     ff6:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			return;
    1000:	08 95       	ret
		}
		
		Lcd4_Clear();
    1002:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		
		if (lightAutomatic)
    100e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
    1012:	88 23       	and	r24, r24
    1014:	39 f0       	breq	.+14     	; 0x1024 <keyboardInput+0x58e>
		{
			Lcd4_Write_String("Light Manual");
    1016:	80 ea       	ldi	r24, 0xA0	; 160
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			lightAutomatic = 0;
    101e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <lightAutomatic>
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <keyboardInput+0x59c>
		}
		else
		{
			Lcd4_Write_String("Light Automatic");
    1024:	8d ea       	ldi	r24, 0xAD	; 173
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			lightAutomatic = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <lightAutomatic>
    1032:	8b e4       	ldi	r24, 0x4B	; 75
    1034:	9d e1       	ldi	r25, 0x1D	; 29
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <keyboardInput+0x5a0>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <keyboardInput+0x5a6>
    103c:	00 00       	nop
		}
		_delay_ms(30);
		
		show_LCD_default();
    103e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1042:	08 95       	ret
	}
	else if (inputNumber == 7)
    1044:	87 30       	cpi	r24, 0x07	; 7
    1046:	41 f5       	brne	.+80     	; 0x1098 <keyboardInput+0x602>
	{
		
		x = '4';
    1048:	84 e3       	ldi	r24, 0x34	; 52
    104a:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
    104e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	c1 f4       	brne	.+48     	; 0x1086 <keyboardInput+0x5f0>
    1056:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    105a:	81 11       	cpse	r24, r1
    105c:	14 c0       	rjmp	.+40     	; 0x1086 <keyboardInput+0x5f0>
		{
			enteredPassowrd[startIndex++] = '4';
    105e:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	8e 0f       	add	r24, r30
    1066:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	e4 53       	subi	r30, 0x34	; 52
    106e:	fd 4f       	sbci	r31, 0xFD	; 253
    1070:	84 e3       	ldi	r24, 0x34	; 52
    1072:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    1074:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    107e:	8a e2       	ldi	r24, 0x2A	; 42
    1080:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    1084:	08 95       	ret
		}
		
		if (lightAutomatic == 0)
    1086:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
    108a:	81 11       	cpse	r24, r1
    108c:	4c c1       	rjmp	.+664    	; 0x1326 <keyboardInput+0x890>
		{
			PORTB ^= 0b00000010;
    108e:	98 b3       	in	r25, 0x18	; 24
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	89 27       	eor	r24, r25
    1094:	88 bb       	out	0x18, r24	; 24
    1096:	08 95       	ret
		}
	}
	else if (inputNumber == 6)
    1098:	86 30       	cpi	r24, 0x06	; 6
    109a:	a9 f5       	brne	.+106    	; 0x1106 <keyboardInput+0x670>
	{
		x = '5';
    109c:	85 e3       	ldi	r24, 0x35	; 53
    109e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (doorOpenState == 3 && passwordGiven == 0)
    10a2:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	c1 f4       	brne	.+48     	; 0x10da <keyboardInput+0x644>
    10aa:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    10ae:	81 11       	cpse	r24, r1
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <keyboardInput+0x644>
		{
			enteredPassowrd[startIndex++] = '5';
    10b2:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	8e 0f       	add	r24, r30
    10ba:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	e4 53       	subi	r30, 0x34	; 52
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	85 e3       	ldi	r24, 0x35	; 53
    10c6:	80 83       	st	Z, r24
			Lcd4_Write_Char('*');
    10c8:	8a e2       	ldi	r24, 0x2A	; 42
    10ca:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			enteredPassowrdLength++;
    10ce:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			return;
    10d8:	08 95       	ret
		}
		
		lightThresholdChange = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <lightThresholdChange>
		Lcd4_Clear();
    10e0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("+/- to change light threshold");
    10ec:	8d eb       	ldi	r24, 0xBD	; 189
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
    10f4:	8b e4       	ldi	r24, 0x4B	; 75
    10f6:	9d e1       	ldi	r25, 0x1D	; 29
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <keyboardInput+0x662>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <keyboardInput+0x668>
    10fe:	00 00       	nop
		_delay_ms(30);
		show_LCD_default();
    1100:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1104:	08 95       	ret
	}
	else if (inputNumber == 5)
    1106:	85 30       	cpi	r24, 0x05	; 5
    1108:	a9 f5       	brne	.+106    	; 0x1174 <keyboardInput+0x6de>
	{
		if (doorOpenState == 3 && passwordGiven == 0)
    110a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	c1 f4       	brne	.+48     	; 0x1142 <keyboardInput+0x6ac>
    1112:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    1116:	81 11       	cpse	r24, r1
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <keyboardInput+0x6ac>
		{
			enteredPassowrd[startIndex++] = '6';
    111a:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	8e 0f       	add	r24, r30
    1122:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	e4 53       	subi	r30, 0x34	; 52
    112a:	fd 4f       	sbci	r31, 0xFD	; 253
    112c:	86 e3       	ldi	r24, 0x36	; 54
    112e:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    1130:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    113a:	8a e2       	ldi	r24, 0x2A	; 42
    113c:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    1140:	08 95       	ret
		}
		x = '6';
    1142:	86 e3       	ldi	r24, 0x36	; 54
    1144:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		humanCountAdjust = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <humanCountAdjust>
		Lcd4_Clear();
    114e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("+/- to adjust human count");
    115a:	8b ed       	ldi	r24, 0xDB	; 219
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
    1162:	8b e4       	ldi	r24, 0x4B	; 75
    1164:	9d e1       	ldi	r25, 0x1D	; 29
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <keyboardInput+0x6d0>
    116a:	00 c0       	rjmp	.+0      	; 0x116c <keyboardInput+0x6d6>
    116c:	00 00       	nop
		_delay_ms(30);
		show_LCD_default();
    116e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1172:	08 95       	ret
	}
	else if (inputNumber ==3)
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	81 f5       	brne	.+96     	; 0x11d8 <keyboardInput+0x742>
	{
		if (doorOpenState == 3 && passwordGiven == 0)
    1178:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	c1 f4       	brne	.+48     	; 0x11b0 <keyboardInput+0x71a>
    1180:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    1184:	81 11       	cpse	r24, r1
    1186:	14 c0       	rjmp	.+40     	; 0x11b0 <keyboardInput+0x71a>
		{
			enteredPassowrdLength++;
    1188:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			enteredPassowrd[startIndex++] = '7';
    1192:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	8e 0f       	add	r24, r30
    119a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	e4 53       	subi	r30, 0x34	; 52
    11a2:	fd 4f       	sbci	r31, 0xFD	; 253
    11a4:	87 e3       	ldi	r24, 0x37	; 55
    11a6:	80 83       	st	Z, r24
			Lcd4_Write_Char('*');
    11a8:	8a e2       	ldi	r24, 0x2A	; 42
    11aa:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    11ae:	08 95       	ret
		}
		x = '7';
    11b0:	87 e3       	ldi	r24, 0x37	; 55
    11b2:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		
		if (windowState == 0)
    11b6:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <windowState>
    11ba:	81 11       	cpse	r24, r1
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <keyboardInput+0x730>
		{
			windowState = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <windowState>
    11c4:	08 95       	ret
		}
		else if (windowState == 2)
    11c6:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <windowState>
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <keyboardInput+0x73a>
    11ce:	ab c0       	rjmp	.+342    	; 0x1326 <keyboardInput+0x890>
		{
			windowState = 3;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <windowState>
    11d6:	08 95       	ret
		}
	}
	else if (inputNumber == 2)
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	01 f5       	brne	.+64     	; 0x121c <keyboardInput+0x786>
	{
		x = '8';
    11dc:	88 e3       	ldi	r24, 0x38	; 56
    11de:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		if (doorOpenState == 3 && passwordGiven == 0)
    11e2:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	09 f0       	breq	.+2      	; 0x11ec <keyboardInput+0x756>
    11ea:	9d c0       	rjmp	.+314    	; 0x1326 <keyboardInput+0x890>
    11ec:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    11f0:	81 11       	cpse	r24, r1
    11f2:	99 c0       	rjmp	.+306    	; 0x1326 <keyboardInput+0x890>
		{
			enteredPassowrd[startIndex++] = '8';
    11f4:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	8e 0f       	add	r24, r30
    11fc:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	e4 53       	subi	r30, 0x34	; 52
    1204:	fd 4f       	sbci	r31, 0xFD	; 253
    1206:	88 e3       	ldi	r24, 0x38	; 56
    1208:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    120a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    1214:	8a e2       	ldi	r24, 0x2A	; 42
    1216:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    121a:	08 95       	ret
		}
	}
	else if (inputNumber ==1)
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	01 f5       	brne	.+64     	; 0x1260 <keyboardInput+0x7ca>
	{
		x = '9';
    1220:	89 e3       	ldi	r24, 0x39	; 57
    1222:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		if (doorOpenState == 3 && passwordGiven == 0)
    1226:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	09 f0       	breq	.+2      	; 0x1230 <keyboardInput+0x79a>
    122e:	7b c0       	rjmp	.+246    	; 0x1326 <keyboardInput+0x890>
    1230:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    1234:	81 11       	cpse	r24, r1
    1236:	77 c0       	rjmp	.+238    	; 0x1326 <keyboardInput+0x890>
		{
			enteredPassowrd[startIndex++] = '9';
    1238:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	8e 0f       	add	r24, r30
    1240:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e4 53       	subi	r30, 0x34	; 52
    1248:	fd 4f       	sbci	r31, 0xFD	; 253
    124a:	89 e3       	ldi	r24, 0x39	; 57
    124c:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    124e:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    1258:	8a e2       	ldi	r24, 0x2A	; 42
    125a:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    125e:	08 95       	ret
		}
	}
	
	else if (inputNumber == 4)
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	01 f5       	brne	.+64     	; 0x12a4 <keyboardInput+0x80e>
	{
		x = '*';
    1264:	8a e2       	ldi	r24, 0x2A	; 42
    1266:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		if (doorOpenState == 3 && passwordGiven == 0)
    126a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	09 f0       	breq	.+2      	; 0x1274 <keyboardInput+0x7de>
    1272:	59 c0       	rjmp	.+178    	; 0x1326 <keyboardInput+0x890>
    1274:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    1278:	81 11       	cpse	r24, r1
    127a:	55 c0       	rjmp	.+170    	; 0x1326 <keyboardInput+0x890>
		{
			enteredPassowrd[startIndex++] = '*';
    127c:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	8e 0f       	add	r24, r30
    1284:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	e4 53       	subi	r30, 0x34	; 52
    128c:	fd 4f       	sbci	r31, 0xFD	; 253
    128e:	8a e2       	ldi	r24, 0x2A	; 42
    1290:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    1292:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    129c:	8a e2       	ldi	r24, 0x2A	; 42
    129e:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    12a2:	08 95       	ret
		}
	}
	else if (inputNumber == 0)
    12a4:	81 11       	cpse	r24, r1
    12a6:	1f c0       	rjmp	.+62     	; 0x12e6 <keyboardInput+0x850>
	{
		x = '/';
    12a8:	8f e2       	ldi	r24, 0x2F	; 47
    12aa:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		if (doorOpenState == 3 && passwordGiven == 0)
    12ae:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	c1 f5       	brne	.+112    	; 0x1326 <keyboardInput+0x890>
    12b6:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    12ba:	81 11       	cpse	r24, r1
    12bc:	34 c0       	rjmp	.+104    	; 0x1326 <keyboardInput+0x890>
		{
			enteredPassowrd[startIndex++] = '/';
    12be:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	8e 0f       	add	r24, r30
    12c6:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	e4 53       	subi	r30, 0x34	; 52
    12ce:	fd 4f       	sbci	r31, 0xFD	; 253
    12d0:	8f e2       	ldi	r24, 0x2F	; 47
    12d2:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    12d4:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    12de:	8a e2       	ldi	r24, 0x2A	; 42
    12e0:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
			return;
    12e4:	08 95       	ret
		}
	}
	else if (inputNumber == 13)
    12e6:	8d 30       	cpi	r24, 0x0D	; 13
    12e8:	f1 f4       	brne	.+60     	; 0x1326 <keyboardInput+0x890>
	{
		x = '=';
    12ea:	8d e3       	ldi	r24, 0x3D	; 61
    12ec:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <x>
		if (doorOpenState == 3 && passwordGiven == 0)
    12f0:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	b9 f4       	brne	.+46     	; 0x1326 <keyboardInput+0x890>
    12f8:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    12fc:	81 11       	cpse	r24, r1
    12fe:	13 c0       	rjmp	.+38     	; 0x1326 <keyboardInput+0x890>
		{
			enteredPassowrd[startIndex++] = '=';
    1300:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <startIndex>
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	8e 0f       	add	r24, r30
    1308:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <startIndex>
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	e4 53       	subi	r30, 0x34	; 52
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	8d e3       	ldi	r24, 0x3D	; 61
    1314:	80 83       	st	Z, r24
			enteredPassowrdLength++;
    1316:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <enteredPassowrdLength>
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <enteredPassowrdLength>
			Lcd4_Write_Char('*');
    1320:	8a e2       	ldi	r24, 0x2A	; 42
    1322:	0e 94 cb 02 	call	0x596	; 0x596 <Lcd4_Write_Char>
    1326:	08 95       	ret

00001328 <readPIRSensor>:


void readPIRSensor()
{
	
	unsigned char inPIRreading = PINC & 0b01000000;
    1328:	93 b3       	in	r25, 0x13	; 19
	unsigned char outPIRreading = PINC & 0b10000000;
    132a:	83 b3       	in	r24, 0x13	; 19
	inPIRreading >>= 6;
	outPIRreading >>= 7;
    132c:	88 1f       	adc	r24, r24
    132e:	88 27       	eor	r24, r24
    1330:	88 1f       	adc	r24, r24
	
	if (!(inPIRreading || outPIRreading))
    1332:	96 fb       	bst	r25, 6
    1334:	22 27       	eor	r18, r18
    1336:	20 f9       	bld	r18, 0
    1338:	96 fd       	sbrc	r25, 6
    133a:	15 c0       	rjmp	.+42     	; 0x1366 <readPIRSensor+0x3e>
    133c:	81 11       	cpse	r24, r1
    133e:	13 c0       	rjmp	.+38     	; 0x1366 <readPIRSensor+0x3e>
	{
		state = 0;
    1340:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <state>
		if (doorOpenState == 4) doorOpenState = 1;
    1344:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	19 f4       	brne	.+6      	; 0x1352 <readPIRSensor+0x2a>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
		if (doorOpenState == 3) 
    1352:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	09 f0       	breq	.+2      	; 0x135c <readPIRSensor+0x34>
    135a:	63 c0       	rjmp	.+198    	; 0x1422 <readPIRSensor+0xfa>
		{
			doorOpenState = 0;
    135c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <doorOpenState>
			show_LCD_default();
    1360:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1364:	08 95       	ret
		}
	}
	else if (outPIRreading == 1 && inPIRreading == 0)
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	d9 f4       	brne	.+54     	; 0x13a0 <readPIRSensor+0x78>
    136a:	21 11       	cpse	r18, r1
    136c:	19 c0       	rjmp	.+50     	; 0x13a0 <readPIRSensor+0x78>
	{
		if (state == 0)
    136e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <state>
    1372:	81 11       	cpse	r24, r1
    1374:	11 c0       	rjmp	.+34     	; 0x1398 <readPIRSensor+0x70>
		{
			doorOpenState = 3;
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
			passwordGiven = 0;
    137c:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <passwordGiven>
			startIndex = 0;
    1380:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <startIndex>
			Lcd4_Clear();
    1384:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,1);
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String("Enter Password: ");
    1390:	82 e4       	ldi	r24, 0x42	; 66
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
		}
		state = 1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <state>
    139e:	08 95       	ret
		
		
	}
	else if (state == 1 && inPIRreading == 1 && doorOpenState == 4)
    13a0:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <state>
    13a4:	91 30       	cpi	r25, 0x01	; 1
    13a6:	b1 f4       	brne	.+44     	; 0x13d4 <readPIRSensor+0xac>
    13a8:	21 30       	cpi	r18, 0x01	; 1
    13aa:	a1 f4       	brne	.+40     	; 0x13d4 <readPIRSensor+0xac>
    13ac:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <doorOpenState>
    13b0:	94 30       	cpi	r25, 0x04	; 4
    13b2:	81 f4       	brne	.+32     	; 0x13d4 <readPIRSensor+0xac>
	{
		state = 2;
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <state>
		humancount++;
    13ba:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
    13be:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <humancount+0x1>
    13c8:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <humancount>
		doorOpenState = 1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
    13d2:	08 95       	ret
	}
	else if (outPIRreading == 0 && inPIRreading == 1)
    13d4:	81 11       	cpse	r24, r1
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <readPIRSensor+0xca>
    13d8:	21 30       	cpi	r18, 0x01	; 1
    13da:	59 f4       	brne	.+22     	; 0x13f2 <readPIRSensor+0xca>
	{
		if (state == 0) doorOpenState = 2;
    13dc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <state>
    13e0:	81 11       	cpse	r24, r1
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <readPIRSensor+0xc2>
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
		state = 3;
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <state>
    13f0:	08 95       	ret
	}
	else if (state == 3 && outPIRreading == 1 && doorOpenState == 4)
    13f2:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <state>
    13f6:	93 30       	cpi	r25, 0x03	; 3
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <readPIRSensor+0xfa>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 f4       	brne	.+36     	; 0x1422 <readPIRSensor+0xfa>
    13fe:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	71 f4       	brne	.+28     	; 0x1422 <readPIRSensor+0xfa>
	{
		state = 4;
    1406:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <state>
		humancount--;
    140a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
    140e:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <humancount+0x1>
    1418:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <humancount>
		doorOpenState = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
    1422:	08 95       	ret

00001424 <doorControl>:
	
}

void doorControl()
{
	if (doorOpenState == 0)
    1424:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1428:	81 11       	cpse	r24, r1
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <doorControl+0x10>
	{
		PORTB &= 0b11001111;
    142c:	88 b3       	in	r24, 0x18	; 24
    142e:	8f 7c       	andi	r24, 0xCF	; 207
    1430:	88 bb       	out	0x18, r24	; 24
    1432:	08 95       	ret
	}
	else if (doorOpenState == 1)
    1434:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	b1 f4       	brne	.+44     	; 0x1468 <doorControl+0x44>
	{
		PORTB &= 0b11001111;
    143c:	88 b3       	in	r24, 0x18	; 24
    143e:	8f 7c       	andi	r24, 0xCF	; 207
    1440:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b00100000;
    1442:	88 b3       	in	r24, 0x18	; 24
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
    1448:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		overflowCount = 0;
    144c:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
		while (timeInterval == 0){}
    1450:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
    1454:	88 23       	and	r24, r24
    1456:	e1 f3       	breq	.-8      	; 0x1450 <doorControl+0x2c>
		PORTB &= 0b11001111;
    1458:	88 b3       	in	r24, 0x18	; 24
    145a:	8f 7c       	andi	r24, 0xCF	; 207
    145c:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
    145e:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		doorOpenState = 0;
    1462:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <doorOpenState>
    1466:	08 95       	ret
	}
	else if (doorOpenState == 2)
    1468:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	b9 f4       	brne	.+46     	; 0x149e <doorControl+0x7a>
	{
		PORTB &= 0b11001111;
    1470:	88 b3       	in	r24, 0x18	; 24
    1472:	8f 7c       	andi	r24, 0xCF	; 207
    1474:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b00010000;
    1476:	88 b3       	in	r24, 0x18	; 24
    1478:	80 61       	ori	r24, 0x10	; 16
    147a:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
    147c:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		overflowCount = 0;
    1480:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
		while (timeInterval == 0){}
    1484:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
    1488:	88 23       	and	r24, r24
    148a:	e1 f3       	breq	.-8      	; 0x1484 <doorControl+0x60>
		PORTB &= 0b11001111;
    148c:	88 b3       	in	r24, 0x18	; 24
    148e:	8f 7c       	andi	r24, 0xCF	; 207
    1490:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
    1492:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		doorOpenState = 4;
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
    149c:	08 95       	ret
	}
	else if (doorOpenState ==3 && passwordGiven == 1)
    149e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	f1 f4       	brne	.+60     	; 0x14e2 <doorControl+0xbe>
    14a6:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <passwordGiven>
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	d1 f4       	brne	.+52     	; 0x14e2 <doorControl+0xbe>
	{
		PORTB &= 0b11001111;
    14ae:	88 b3       	in	r24, 0x18	; 24
    14b0:	8f 7c       	andi	r24, 0xCF	; 207
    14b2:	88 bb       	out	0x18, r24	; 24
		PORTB |= 0b00010000;
    14b4:	88 b3       	in	r24, 0x18	; 24
    14b6:	80 61       	ori	r24, 0x10	; 16
    14b8:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
    14ba:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		overflowCount = 0;
    14be:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
		while (timeInterval == 0){}
    14c2:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
    14c6:	88 23       	and	r24, r24
    14c8:	e1 f3       	breq	.-8      	; 0x14c2 <doorControl+0x9e>
		PORTB &= 0b11001111;
    14ca:	88 b3       	in	r24, 0x18	; 24
    14cc:	8f 7c       	andi	r24, 0xCF	; 207
    14ce:	88 bb       	out	0x18, r24	; 24
		timeInterval = 0;
    14d0:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
		doorOpenState = 4;
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
		passwordGiven = 0;
    14da:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <passwordGiven>
		show_LCD_default();
    14de:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    14e2:	08 95       	ret

000014e4 <USART_init>:
	Lcd4_Write_String(output1);
}

void USART_init()
{
	UCSRA = 0;
    14e4:	1b b8       	out	0x0b, r1	; 11
	UCSRA |= (1 << U2X);
    14e6:	8b b1       	in	r24, 0x0b	; 11
    14e8:	82 60       	ori	r24, 0x02	; 2
    14ea:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0b00011000;
    14ec:	88 e1       	ldi	r24, 0x18	; 24
    14ee:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXCIE);
    14f0:	8a b1       	in	r24, 0x0a	; 10
    14f2:	80 68       	ori	r24, 0x80	; 128
    14f4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110; 
    14f6:	86 e8       	ldi	r24, 0x86	; 134
    14f8:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = 0;//baud rate 9600
    14fa:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
    14fc:	8c e0       	ldi	r24, 0x0C	; 12
    14fe:	89 b9       	out	0x09, r24	; 9
    1500:	08 95       	ret

00001502 <__vector_13>:

volatile unsigned char inputFromUart = 0, uartData;
unsigned char fireHazard = 0, newPasswordState = 0;

ISR(USART_RXC_vect)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	8f 93       	push	r24
	inputFromUart = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <inputFromUart>
	uartData = UDR;
    1514:	8c b1       	in	r24, 0x0c	; 12
    1516:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <uartData>
}
    151a:	8f 91       	pop	r24
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <isValidChar>:
	UDR = data;
}

int isValidChar()
{
	for (int i = 0; validChars[i]; i++)
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <isValidChar+0x12>
	{
		if (uartData == validChars[i]) return 1;
    152c:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <uartData>
    1530:	89 17       	cp	r24, r25
    1532:	59 f0       	breq	.+22     	; 0x154a <isValidChar+0x24>
	UDR = data;
}

int isValidChar()
{
	for (int i = 0; validChars[i]; i++)
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	f9 01       	movw	r30, r18
    153a:	e9 59       	subi	r30, 0x99	; 153
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	81 11       	cpse	r24, r1
    1542:	f4 cf       	rjmp	.-24     	; 0x152c <isValidChar+0x6>
	{
		if (uartData == validChars[i]) return 1;
	}
	
	return 0;
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	08 95       	ret

int isValidChar()
{
	for (int i = 0; validChars[i]; i++)
	{
		if (uartData == validChars[i]) return 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
}
    154e:	08 95       	ret

00001550 <processUartInput>:

void processUartInput()
{
	inputFromUart = 0;
    1550:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <inputFromUart>
	if ((uartData == 'p' || uartData == 'P') & newPasswordState == 0)
    1554:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    1558:	80 37       	cpi	r24, 0x70	; 112
    155a:	31 f0       	breq	.+12     	; 0x1568 <processUartInput+0x18>
    155c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    1560:	80 35       	cpi	r24, 0x50	; 80
    1562:	21 f4       	brne	.+8      	; 0x156c <processUartInput+0x1c>
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	03 c0       	rjmp	.+6      	; 0x156e <processUartInput+0x1e>
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	01 c0       	rjmp	.+2      	; 0x156e <processUartInput+0x1e>
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <__data_end>
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	91 11       	cpse	r25, r1
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	82 23       	and	r24, r18
    157a:	c1 f0       	breq	.+48     	; 0x15ac <processUartInput+0x5c>
	{
		newPasswordState = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end>
		Lcd4_Clear();
    1582:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1, 1);
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		Lcd4_Write_String("Password reset mode!");
    158e:	85 ef       	ldi	r24, 0xF5	; 245
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
		printf("\n\rNew Password: ");
    1596:	8a e0       	ldi	r24, 0x0A	; 10
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	9f 93       	push	r25
    159c:	8f 93       	push	r24
    159e:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		newPasswordLength = 0;
    15a2:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <newPasswordLength>
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	08 95       	ret
		
	}
	else if (uartData == '\n' || uartData == ' ' || uartData == '\r')
    15ac:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    15b0:	8a 30       	cpi	r24, 0x0A	; 10
    15b2:	41 f0       	breq	.+16     	; 0x15c4 <processUartInput+0x74>
    15b4:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    15b8:	80 32       	cpi	r24, 0x20	; 32
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <processUartInput+0x74>
    15bc:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    15c0:	8d 30       	cpi	r24, 0x0D	; 13
    15c2:	a1 f5       	brne	.+104    	; 0x162c <processUartInput+0xdc>
	{
		if (newPasswordState == 1)
    15c4:	91 30       	cpi	r25, 0x01	; 1
    15c6:	09 f0       	breq	.+2      	; 0x15ca <processUartInput+0x7a>
    15c8:	4b c1       	rjmp	.+662    	; 0x1860 <processUartInput+0x310>
		{
			if (newPasswordLength < 4)
    15ca:	40 91 a9 02 	lds	r20, 0x02A9	; 0x8002a9 <newPasswordLength>
    15ce:	44 30       	cpi	r20, 0x04	; 4
    15d0:	68 f4       	brcc	.+26     	; 0x15ec <processUartInput+0x9c>
			{
				printf("Password too short\n\r");
    15d2:	8b e1       	ldi	r24, 0x1B	; 27
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	9f 93       	push	r25
    15d8:	8f 93       	push	r24
    15da:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
				show_LCD_default();
    15de:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
				newPasswordState = 0;
    15e2:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <__data_end>
				return;
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	08 95       	ret
			}
			passwordLength = newPasswordLength;
    15ec:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <passwordLength>
			
			for (int i = 0; i < newPasswordLength; i++)
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <processUartInput+0xb8>
			{
				password[i] = newPassword[i];
    15f6:	fc 01       	movw	r30, r24
    15f8:	e2 50       	subi	r30, 0x02	; 2
    15fa:	fd 4f       	sbci	r31, 0xFD	; 253
    15fc:	20 81       	ld	r18, Z
    15fe:	fc 01       	movw	r30, r24
    1600:	e5 58       	subi	r30, 0x85	; 133
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	20 83       	st	Z, r18
				newPasswordState = 0;
				return;
			}
			passwordLength = newPasswordLength;
			
			for (int i = 0; i < newPasswordLength; i++)
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	24 2f       	mov	r18, r20
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	82 17       	cp	r24, r18
    160e:	93 07       	cpc	r25, r19
    1610:	94 f3       	brlt	.-28     	; 0x15f6 <processUartInput+0xa6>
			{
				password[i] = newPassword[i];
			}
			
			show_LCD_default();
    1612:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
			printf("Password reset successful!\n\r");
    1616:	80 e3       	ldi	r24, 0x30	; 48
    1618:	92 e0       	ldi	r25, 0x02	; 2
    161a:	9f 93       	push	r25
    161c:	8f 93       	push	r24
    161e:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
			newPasswordState = 0;
    1622:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <__data_end>
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	08 95       	ret
		}
	}
	else if (newPasswordState && isValidChar() && newPasswordLength < 49)
    162c:	99 23       	and	r25, r25
    162e:	99 f0       	breq	.+38     	; 0x1656 <processUartInput+0x106>
    1630:	0e 94 93 0a 	call	0x1526	; 0x1526 <isValidChar>
    1634:	89 2b       	or	r24, r25
    1636:	79 f0       	breq	.+30     	; 0x1656 <processUartInput+0x106>
    1638:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <newPasswordLength>
    163c:	e1 33       	cpi	r30, 0x31	; 49
    163e:	58 f4       	brcc	.+22     	; 0x1656 <processUartInput+0x106>
	{
		newPassword[newPasswordLength++] = uartData;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	8e 0f       	add	r24, r30
    1644:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <newPasswordLength>
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    164e:	e2 50       	subi	r30, 0x02	; 2
    1650:	fd 4f       	sbci	r31, 0xFD	; 253
    1652:	80 83       	st	Z, r24
    1654:	08 95       	ret
	}
	else if (newPasswordState)
    1656:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
    165a:	88 23       	and	r24, r24
    165c:	b1 f0       	breq	.+44     	; 0x168a <processUartInput+0x13a>
	{
		if (uartData == 'c' || uartData == 'C')
    165e:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    1662:	83 36       	cpi	r24, 0x63	; 99
    1664:	29 f0       	breq	.+10     	; 0x1670 <processUartInput+0x120>
    1666:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    166a:	83 34       	cpi	r24, 0x43	; 67
    166c:	09 f0       	breq	.+2      	; 0x1670 <processUartInput+0x120>
    166e:	f8 c0       	rjmp	.+496    	; 0x1860 <processUartInput+0x310>
		{
			printf("\n\rPassword unchanged\n\r");
    1670:	8d e4       	ldi	r24, 0x4D	; 77
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	9f 93       	push	r25
    1676:	8f 93       	push	r24
    1678:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
			newPasswordState = 0;
    167c:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <__data_end>
			show_LCD_default();
    1680:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	08 95       	ret
		}
	}
	else if (uartData == 'w' || uartData == 'W')
    168a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    168e:	87 37       	cpi	r24, 0x77	; 119
    1690:	21 f0       	breq	.+8      	; 0x169a <processUartInput+0x14a>
    1692:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    1696:	87 35       	cpi	r24, 0x57	; 87
    1698:	d9 f4       	brne	.+54     	; 0x16d0 <processUartInput+0x180>
	{
		uartData = 'x';
    169a:	88 e7       	ldi	r24, 0x78	; 120
    169c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <uartData>
		if (windowState == 0)
    16a0:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <windowState>
    16a4:	81 11       	cpse	r24, r1
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <processUartInput+0x160>
		{
			windowState = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <windowState>
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <processUartInput+0x16e>
		}
		else if (windowState == 2)
    16b0:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <windowState>
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	19 f4       	brne	.+6      	; 0x16be <processUartInput+0x16e>
		{
			windowState = 3;
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <windowState>
		}
		printf("\n\r");
    16be:	89 e7       	ldi	r24, 0x79	; 121
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	9f 93       	push	r25
    16c4:	8f 93       	push	r24
    16c6:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	08 95       	ret
	}
	else if (uartData == '0')
    16d0:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	49 f5       	brne	.+82     	; 0x172a <processUartInput+0x1da>
	{
		printf("\n\r");
    16d8:	89 e7       	ldi	r24, 0x79	; 121
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	9f 93       	push	r25
    16de:	8f 93       	push	r24
    16e0:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		Lcd4_Clear();
    16e4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		
		if (tempAutomatic)
    16f0:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	88 23       	and	r24, r24
    16fa:	39 f0       	breq	.+14     	; 0x170a <processUartInput+0x1ba>
		{
			Lcd4_Write_String("Temperature Manual");
    16fc:	83 e5       	ldi	r24, 0x53	; 83
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			tempAutomatic = 0;
    1704:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <tempAutomatic>
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <processUartInput+0x1c8>
		}
		else
		{
			Lcd4_Write_String("Temperature Automatic");
    170a:	86 e6       	ldi	r24, 0x66	; 102
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			tempAutomatic = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <tempAutomatic>
    1718:	8b e4       	ldi	r24, 0x4B	; 75
    171a:	9d e1       	ldi	r25, 0x1D	; 29
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <processUartInput+0x1cc>
    1720:	00 c0       	rjmp	.+0      	; 0x1722 <processUartInput+0x1d2>
    1722:	00 00       	nop
		}
		_delay_ms(30);
		
		show_LCD_default();
    1724:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1728:	08 95       	ret
	}
	else if (uartData == '1')
    172a:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    172e:	81 33       	cpi	r24, 0x31	; 49
    1730:	89 f4       	brne	.+34     	; 0x1754 <processUartInput+0x204>
	{
		if (tempAutomatic == 0)
    1732:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
    1736:	81 11       	cpse	r24, r1
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <processUartInput+0x1f2>
		{
			PORTB ^= 0b00000001;
    173a:	98 b3       	in	r25, 0x18	; 24
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 27       	eor	r24, r25
    1740:	88 bb       	out	0x18, r24	; 24
		}
		printf("\n\r");
    1742:	89 e7       	ldi	r24, 0x79	; 121
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	9f 93       	push	r25
    1748:	8f 93       	push	r24
    174a:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	08 95       	ret
	}
	else if (uartData == '3')
    1754:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    1758:	83 33       	cpi	r24, 0x33	; 51
    175a:	49 f5       	brne	.+82     	; 0x17ae <processUartInput+0x25e>
	{
		printf("\n\r");
    175c:	89 e7       	ldi	r24, 0x79	; 121
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	9f 93       	push	r25
    1762:	8f 93       	push	r24
    1764:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		
		Lcd4_Clear();
    1768:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,1);
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
		
		if (lightAutomatic)
    1774:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	88 23       	and	r24, r24
    177e:	39 f0       	breq	.+14     	; 0x178e <processUartInput+0x23e>
		{
			Lcd4_Write_String("Light Manual");
    1780:	80 ea       	ldi	r24, 0xA0	; 160
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			lightAutomatic = 0;
    1788:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <lightAutomatic>
    178c:	07 c0       	rjmp	.+14     	; 0x179c <processUartInput+0x24c>
		}
		else
		{
			Lcd4_Write_String("Light Automatic");
    178e:	8d ea       	ldi	r24, 0xAD	; 173
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
			lightAutomatic = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <lightAutomatic>
    179c:	8b e4       	ldi	r24, 0x4B	; 75
    179e:	9d e1       	ldi	r25, 0x1D	; 29
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <processUartInput+0x250>
    17a4:	00 c0       	rjmp	.+0      	; 0x17a6 <processUartInput+0x256>
    17a6:	00 00       	nop
		}
		_delay_ms(30);
		
		show_LCD_default();
    17a8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    17ac:	08 95       	ret
	}
	else if (uartData == '4') 
    17ae:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    17b2:	84 33       	cpi	r24, 0x34	; 52
    17b4:	89 f4       	brne	.+34     	; 0x17d8 <processUartInput+0x288>
	{
		printf("\n\r");	
    17b6:	89 e7       	ldi	r24, 0x79	; 121
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	9f 93       	push	r25
    17bc:	8f 93       	push	r24
    17be:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		if (lightAutomatic == 0)
    17c2:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	81 11       	cpse	r24, r1
    17cc:	49 c0       	rjmp	.+146    	; 0x1860 <processUartInput+0x310>
		{
			PORTB ^= 0b00000010;
    17ce:	98 b3       	in	r25, 0x18	; 24
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	89 27       	eor	r24, r25
    17d4:	88 bb       	out	0x18, r24	; 24
    17d6:	08 95       	ret
		}
	}
	else if (uartData == 'd' || uartData == 'D')
    17d8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    17dc:	84 36       	cpi	r24, 0x64	; 100
    17de:	21 f0       	breq	.+8      	; 0x17e8 <processUartInput+0x298>
    17e0:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <uartData>
    17e4:	84 34       	cpi	r24, 0x44	; 68
    17e6:	e1 f5       	brne	.+120    	; 0x1860 <processUartInput+0x310>
	{
		printf("\n\r");
    17e8:	89 e7       	ldi	r24, 0x79	; 121
    17ea:	92 e0       	ldi	r25, 0x02	; 2
    17ec:	9f 93       	push	r25
    17ee:	8f 93       	push	r24
    17f0:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
		if (doorOpenState == 4)
    17f4:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	b1 f4       	brne	.+44     	; 0x182c <processUartInput+0x2dc>
		{
			PORTB &= 0b11001111;
    1800:	88 b3       	in	r24, 0x18	; 24
    1802:	8f 7c       	andi	r24, 0xCF	; 207
    1804:	88 bb       	out	0x18, r24	; 24
			PORTB |= 0b00100000;
    1806:	88 b3       	in	r24, 0x18	; 24
    1808:	80 62       	ori	r24, 0x20	; 32
    180a:	88 bb       	out	0x18, r24	; 24
			timeInterval = 0;
    180c:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
			overflowCount = 0;
    1810:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
			while (timeInterval == 0){}
    1814:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
    1818:	88 23       	and	r24, r24
    181a:	e1 f3       	breq	.-8      	; 0x1814 <processUartInput+0x2c4>
			PORTB &= 0b11001111;
    181c:	88 b3       	in	r24, 0x18	; 24
    181e:	8f 7c       	andi	r24, 0xCF	; 207
    1820:	88 bb       	out	0x18, r24	; 24
			timeInterval = 0;
    1822:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
			doorOpenState = 0;
    1826:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <doorOpenState>
    182a:	08 95       	ret
		}
		else
		{
			doorOpenState = 4;	
    182c:	84 e0       	ldi	r24, 0x04	; 4
    182e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <doorOpenState>
			PORTB &= 0b11001111;
    1832:	88 b3       	in	r24, 0x18	; 24
    1834:	8f 7c       	andi	r24, 0xCF	; 207
    1836:	88 bb       	out	0x18, r24	; 24
			PORTB |= 0b00010000;
    1838:	88 b3       	in	r24, 0x18	; 24
    183a:	80 61       	ori	r24, 0x10	; 16
    183c:	88 bb       	out	0x18, r24	; 24
			timeInterval = 0;
    183e:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
			overflowCount = 0;
    1842:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <overflowCount>
			while (timeInterval == 0){}
    1846:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <timeInterval>
    184a:	88 23       	and	r24, r24
    184c:	e1 f3       	breq	.-8      	; 0x1846 <processUartInput+0x2f6>
			PORTB &= 0b11001111;
    184e:	88 b3       	in	r24, 0x18	; 24
    1850:	8f 7c       	andi	r24, 0xCF	; 207
    1852:	88 bb       	out	0x18, r24	; 24
			timeInterval = 0;
    1854:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <timeInterval>
			passwordGiven = 0;
    1858:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <passwordGiven>
			show_LCD_default();
    185c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
    1860:	08 95       	ret

00001862 <main>:
		}
	}
}

int main(void)
{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	2a 97       	sbiw	r28, 0x0a	; 10
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	
	MCUCSR = (1<<JTD); 
    1876:	80 e8       	ldi	r24, 0x80	; 128
    1878:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
    187a:	84 bf       	out	0x34, r24	; 52

	
	DDRB = 0b11111011;
    187c:	8b ef       	ldi	r24, 0xFB	; 251
    187e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b11111100;
    1880:	8c ef       	ldi	r24, 0xFC	; 252
    1882:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
    1884:	14 ba       	out	0x14, r1	; 20
	ADMUX = 0b01000000;
    1886:	80 e4       	ldi	r24, 0x40	; 64
    1888:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10001100;
    188a:	8c e8       	ldi	r24, 0x8C	; 140
    188c:	86 b9       	out	0x06, r24	; 6
	
	TCCR1A = 0b00000000;//normal mode
    188e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00000001;//no prescalar, internal clock
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 0b00000100;//enable overflow interrupt
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	89 bf       	out	0x39, r24	; 57
	
	GICR |= (1 << INT2);
    1898:	8b b7       	in	r24, 0x3b	; 59
    189a:	80 62       	ori	r24, 0x20	; 32
    189c:	8b bf       	out	0x3b, r24	; 59
	MCUCSR |= (1 << ISC2);
    189e:	84 b7       	in	r24, 0x34	; 52
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	84 bf       	out	0x34, r24	; 52
	
	USART_init();
    18a4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <USART_init>
	
	stdout = fdevopen(uart_send, NULL);
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	89 e4       	ldi	r24, 0x49	; 73
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 1a 10 	call	0x2034	; 0x2034 <fdevopen>
    18b4:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <__iob+0x3>
    18b8:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__iob+0x2>
	
	Lcd4_Init();
    18bc:	0e 94 97 02 	call	0x52e	; 0x52e <Lcd4_Init>
	char tempout[5]="a";
    18c0:	81 e6       	ldi	r24, 0x61	; 97
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	fe 01       	movw	r30, r28
    18cc:	33 96       	adiw	r30, 0x03	; 3
    18ce:	df 01       	movw	r26, r30
    18d0:	98 2f       	mov	r25, r24
    18d2:	1d 92       	st	X+, r1
    18d4:	9a 95       	dec	r25
    18d6:	e9 f7       	brne	.-6      	; 0x18d2 <main+0x70>
	char output[5] = "n";
    18d8:	2e e6       	ldi	r18, 0x6E	; 110
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3f 83       	std	Y+7, r19	; 0x07
    18de:	2e 83       	std	Y+6, r18	; 0x06
    18e0:	35 96       	adiw	r30, 0x05	; 5
    18e2:	df 01       	movw	r26, r30
    18e4:	1d 92       	st	X+, r1
    18e6:	8a 95       	dec	r24
    18e8:	e9 f7       	brne	.-6      	; 0x18e4 <main+0x82>
	
	sei();
    18ea:	78 94       	sei
	
	ADCSRA |= (1 << ADSC);
    18ec:	86 b1       	in	r24, 0x06	; 6
    18ee:	80 64       	ori	r24, 0x40	; 64
    18f0:	86 b9       	out	0x06, r24	; 6
	
	show_LCD_default();
    18f2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
	
	while (1)
	{
		ADCSRA |= (1 << ADSC);
    18f6:	86 b1       	in	r24, 0x06	; 6
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	86 b9       	out	0x06, r24	; 6
		
		
		if (doorOpenState != 3 && fireHazard == 0 && newPasswordState == 0)
    18fc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	09 f4       	brne	.+2      	; 0x1906 <main+0xa4>
    1904:	58 c0       	rjmp	.+176    	; 0x19b6 <main+0x154>
    1906:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <fireHazard>
    190a:	81 11       	cpse	r24, r1
    190c:	54 c0       	rjmp	.+168    	; 0x19b6 <main+0x154>
    190e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
    1912:	81 11       	cpse	r24, r1
    1914:	50 c0       	rjmp	.+160    	; 0x19b6 <main+0x154>
		{
			doubleToString(temperature, tempout, 0, TEMP);
    1916:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <temperature>
    191a:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <temperature+0x1>
    191e:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <temperature+0x2>
    1922:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <temperature+0x3>
    1926:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	be 01       	movw	r22, r28
    1938:	6f 5f       	subi	r22, 0xFF	; 255
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			tempout[index] = '\0';
    1940:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
    1944:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	8c 0f       	add	r24, r28
    194e:	9d 1f       	adc	r25, r29
    1950:	e8 0f       	add	r30, r24
    1952:	f9 1f       	adc	r31, r25
    1954:	10 82       	st	Z, r1
			Lcd4_Set_Cursor(1, 5);
    1956:	65 e0       	ldi	r22, 0x05	; 5
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String(tempout);
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
		
		
		
			doubleToString(light, output, 0, LIGHT);
    1966:	60 91 b7 00 	lds	r22, 0x00B7	; 0x8000b7 <light>
    196a:	70 91 b8 00 	lds	r23, 0x00B8	; 0x8000b8 <light+0x1>
    196e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <light+0x2>
    1972:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <light+0x3>
    1976:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fixsfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	22 e0       	ldi	r18, 0x02	; 2
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	be 01       	movw	r22, r28
    1988:	6a 5f       	subi	r22, 0xFA	; 250
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output[index] = '\0';
    1990:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
    1994:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
    1998:	a6 e0       	ldi	r26, 0x06	; 6
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ac 0f       	add	r26, r28
    199e:	bd 1f       	adc	r27, r29
    19a0:	ea 0f       	add	r30, r26
    19a2:	fb 1f       	adc	r31, r27
    19a4:	10 82       	st	Z, r1
			
			Lcd4_Set_Cursor(2,5);
    19a6:	65 e0       	ldi	r22, 0x05	; 5
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String(output);
    19ae:	ce 01       	movw	r24, r28
    19b0:	06 96       	adiw	r24, 0x06	; 6
    19b2:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
		
		}
		
		if (inputFromUart) processUartInput();
    19b6:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <inputFromUart>
    19ba:	81 11       	cpse	r24, r1
    19bc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <processUartInput>
		
		readPIRSensor();
    19c0:	0e 94 94 09 	call	0x1328	; 0x1328 <readPIRSensor>
		doorControl();
    19c4:	0e 94 12 0a 	call	0x1424	; 0x1424 <doorControl>
		windowControl();
    19c8:	0e 94 b3 04 	call	0x966	; 0x966 <windowControl>
		
		if (doorOpenState != 3 && fireHazard == 0 && newPasswordState == 0)
    19cc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <doorOpenState>
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	41 f1       	breq	.+80     	; 0x1a24 <main+0x1c2>
    19d4:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <fireHazard>
    19d8:	81 11       	cpse	r24, r1
    19da:	24 c0       	rjmp	.+72     	; 0x1a24 <main+0x1c2>
    19dc:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
    19e0:	81 11       	cpse	r24, r1
    19e2:	20 c0       	rjmp	.+64     	; 0x1a24 <main+0x1c2>
		{
			doubleToString(humancount, output, 0, PEOPLE);
    19e4:	23 e0       	ldi	r18, 0x03	; 3
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	be 01       	movw	r22, r28
    19ee:	6a 5f       	subi	r22, 0xFA	; 250
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
    19f6:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
    19fa:	0e 94 28 03 	call	0x650	; 0x650 <doubleToString>
			output[index] = '\0';
    19fe:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <index>
    1a02:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <index+0x1>
    1a06:	86 e0       	ldi	r24, 0x06	; 6
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	8c 0f       	add	r24, r28
    1a0c:	9d 1f       	adc	r25, r29
    1a0e:	e8 0f       	add	r30, r24
    1a10:	f9 1f       	adc	r31, r25
    1a12:	10 82       	st	Z, r1
			Lcd4_Set_Cursor(1, 13);
    1a14:	6d e0       	ldi	r22, 0x0D	; 13
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
			Lcd4_Write_String(output);
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	06 96       	adiw	r24, 0x06	; 6
    1a20:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
		}
		
		
		if (keyInput)
    1a24:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <keyInput>
    1a28:	81 11       	cpse	r24, r1
		{
			keyboardInput();
    1a2a:	0e 94 4b 05 	call	0xa96	; 0xa96 <keyboardInput>
		}
		
		if (humancount > 0 && tempAutomatic && temperature >= tempThreshold) PORTB |= 1;
    1a2e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
    1a32:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
    1a36:	18 16       	cp	r1, r24
    1a38:	19 06       	cpc	r1, r25
    1a3a:	f4 f4       	brge	.+60     	; 0x1a78 <main+0x216>
    1a3c:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
    1a40:	88 23       	and	r24, r24
    1a42:	d1 f0       	breq	.+52     	; 0x1a78 <main+0x216>
    1a44:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <tempThreshold>
    1a48:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <tempThreshold+0x1>
    1a4c:	07 2e       	mov	r0, r23
    1a4e:	00 0c       	add	r0, r0
    1a50:	88 0b       	sbc	r24, r24
    1a52:	99 0b       	sbc	r25, r25
    1a54:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatsisf>
    1a58:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <temperature>
    1a5c:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <temperature+0x1>
    1a60:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <temperature+0x2>
    1a64:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <temperature+0x3>
    1a68:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__cmpsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	24 f0       	brlt	.+8      	; 0x1a78 <main+0x216>
    1a70:	88 b3       	in	r24, 0x18	; 24
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	88 bb       	out	0x18, r24	; 24
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <main+0x224>
		else if (tempAutomatic) PORTB &= 0b11111110;
    1a78:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <tempAutomatic>
    1a7c:	88 23       	and	r24, r24
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <main+0x224>
    1a80:	88 b3       	in	r24, 0x18	; 24
    1a82:	8e 7f       	andi	r24, 0xFE	; 254
    1a84:	88 bb       	out	0x18, r24	; 24
		
		if (humancount > 0 && lightAutomatic && light <= lightThreshold) PORTB |= 0b00000010;
    1a86:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <humancount>
    1a8a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <humancount+0x1>
    1a8e:	18 16       	cp	r1, r24
    1a90:	19 06       	cpc	r1, r25
    1a92:	f4 f4       	brge	.+60     	; 0x1ad0 <main+0x26e>
    1a94:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
    1a98:	88 23       	and	r24, r24
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <main+0x26e>
    1a9c:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <lightThreshold>
    1aa0:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <lightThreshold+0x1>
    1aa4:	07 2e       	mov	r0, r23
    1aa6:	00 0c       	add	r0, r0
    1aa8:	88 0b       	sbc	r24, r24
    1aaa:	99 0b       	sbc	r25, r25
    1aac:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatsisf>
    1ab0:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <light>
    1ab4:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <light+0x1>
    1ab8:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <light+0x2>
    1abc:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <light+0x3>
    1ac0:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__gesf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	24 f0       	brlt	.+8      	; 0x1ad0 <main+0x26e>
    1ac8:	88 b3       	in	r24, 0x18	; 24
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	88 bb       	out	0x18, r24	; 24
    1ace:	07 c0       	rjmp	.+14     	; 0x1ade <main+0x27c>
		else if (lightAutomatic) PORTB &= 0b11111101;
    1ad0:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <lightAutomatic>
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <main+0x27c>
    1ad8:	88 b3       	in	r24, 0x18	; 24
    1ada:	8d 7f       	andi	r24, 0xFD	; 253
    1adc:	88 bb       	out	0x18, r24	; 24
		
		if (temperature >= 100 || PINC & 16 || PINC & 32)
    1ade:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <temperature>
    1ae2:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <temperature+0x1>
    1ae6:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <temperature+0x2>
    1aea:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <temperature+0x3>
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	48 ec       	ldi	r20, 0xC8	; 200
    1af4:	52 e4       	ldi	r21, 0x42	; 66
    1af6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__gesf2>
    1afa:	88 23       	and	r24, r24
    1afc:	24 f4       	brge	.+8      	; 0x1b06 <main+0x2a4>
    1afe:	9c 99       	sbic	0x13, 4	; 19
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <main+0x2a4>
    1b02:	9d 9b       	sbis	0x13, 5	; 19
    1b04:	1d c0       	rjmp	.+58     	; 0x1b40 <main+0x2de>
		{
			PORTB |= 8;
    1b06:	88 b3       	in	r24, 0x18	; 24
    1b08:	88 60       	ori	r24, 0x08	; 8
    1b0a:	88 bb       	out	0x18, r24	; 24
			if (fireHazard == 0)
    1b0c:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <fireHazard>
    1b10:	81 11       	cpse	r24, r1
    1b12:	f1 ce       	rjmp	.-542    	; 0x18f6 <main+0x94>
			{
				printf("Fire Hazard Detected!\n\r");
    1b14:	84 e6       	ldi	r24, 0x64	; 100
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	9f 93       	push	r25
    1b1a:	8f 93       	push	r24
    1b1c:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
				
				Lcd4_Clear();
    1b20:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,1);
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Lcd4_Set_Cursor>
				Lcd4_Write_String("Fire Hazard Detected!");
    1b2c:	8c e7       	ldi	r24, 0x7C	; 124
    1b2e:	92 e0       	ldi	r25, 0x02	; 2
    1b30:	0e 94 12 03 	call	0x624	; 0x624 <Lcd4_Write_String>
				fireHazard = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <fireHazard>
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	db ce       	rjmp	.-586    	; 0x18f6 <main+0x94>
			}
			
		} 
		else {
			PORTB &= 0b11110111;
    1b40:	88 b3       	in	r24, 0x18	; 24
    1b42:	87 7f       	andi	r24, 0xF7	; 247
    1b44:	88 bb       	out	0x18, r24	; 24
			if (fireHazard)
    1b46:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <fireHazard>
    1b4a:	88 23       	and	r24, r24
    1b4c:	51 f0       	breq	.+20     	; 0x1b62 <main+0x300>
			{
				show_LCD_default();
    1b4e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <show_LCD_default>
				printf("No fire hazard.\n\r");
    1b52:	82 e9       	ldi	r24, 0x92	; 146
    1b54:	92 e0       	ldi	r25, 0x02	; 2
    1b56:	9f 93       	push	r25
    1b58:	8f 93       	push	r24
    1b5a:	0e 94 65 10 	call	0x20ca	; 0x20ca <printf>
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
			}
			fireHazard = 0;
    1b62:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <fireHazard>
    1b66:	c7 ce       	rjmp	.-626    	; 0x18f6 <main+0x94>

00001b68 <__subsf3>:
    1b68:	50 58       	subi	r21, 0x80	; 128

00001b6a <__addsf3>:
    1b6a:	bb 27       	eor	r27, r27
    1b6c:	aa 27       	eor	r26, r26
    1b6e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__addsf3x>
    1b72:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__fp_round>
    1b76:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__fp_pscA>
    1b7a:	38 f0       	brcs	.+14     	; 0x1b8a <__addsf3+0x20>
    1b7c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_pscB>
    1b80:	20 f0       	brcs	.+8      	; 0x1b8a <__addsf3+0x20>
    1b82:	39 f4       	brne	.+14     	; 0x1b92 <__addsf3+0x28>
    1b84:	9f 3f       	cpi	r25, 0xFF	; 255
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <__addsf3+0x24>
    1b88:	26 f4       	brtc	.+8      	; 0x1b92 <__addsf3+0x28>
    1b8a:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_nan>
    1b8e:	0e f4       	brtc	.+2      	; 0x1b92 <__addsf3+0x28>
    1b90:	e0 95       	com	r30
    1b92:	e7 fb       	bst	r30, 7
    1b94:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__fp_inf>

00001b98 <__addsf3x>:
    1b98:	e9 2f       	mov	r30, r25
    1b9a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fp_split3>
    1b9e:	58 f3       	brcs	.-42     	; 0x1b76 <__addsf3+0xc>
    1ba0:	ba 17       	cp	r27, r26
    1ba2:	62 07       	cpc	r22, r18
    1ba4:	73 07       	cpc	r23, r19
    1ba6:	84 07       	cpc	r24, r20
    1ba8:	95 07       	cpc	r25, r21
    1baa:	20 f0       	brcs	.+8      	; 0x1bb4 <__addsf3x+0x1c>
    1bac:	79 f4       	brne	.+30     	; 0x1bcc <__addsf3x+0x34>
    1bae:	a6 f5       	brtc	.+104    	; 0x1c18 <__addsf3x+0x80>
    1bb0:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__fp_zero>
    1bb4:	0e f4       	brtc	.+2      	; 0x1bb8 <__addsf3x+0x20>
    1bb6:	e0 95       	com	r30
    1bb8:	0b 2e       	mov	r0, r27
    1bba:	ba 2f       	mov	r27, r26
    1bbc:	a0 2d       	mov	r26, r0
    1bbe:	0b 01       	movw	r0, r22
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	90 01       	movw	r18, r0
    1bc4:	0c 01       	movw	r0, r24
    1bc6:	ca 01       	movw	r24, r20
    1bc8:	a0 01       	movw	r20, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	ff 27       	eor	r31, r31
    1bce:	59 1b       	sub	r21, r25
    1bd0:	99 f0       	breq	.+38     	; 0x1bf8 <__addsf3x+0x60>
    1bd2:	59 3f       	cpi	r21, 0xF9	; 249
    1bd4:	50 f4       	brcc	.+20     	; 0x1bea <__addsf3x+0x52>
    1bd6:	50 3e       	cpi	r21, 0xE0	; 224
    1bd8:	68 f1       	brcs	.+90     	; 0x1c34 <__addsf3x+0x9c>
    1bda:	1a 16       	cp	r1, r26
    1bdc:	f0 40       	sbci	r31, 0x00	; 0
    1bde:	a2 2f       	mov	r26, r18
    1be0:	23 2f       	mov	r18, r19
    1be2:	34 2f       	mov	r19, r20
    1be4:	44 27       	eor	r20, r20
    1be6:	58 5f       	subi	r21, 0xF8	; 248
    1be8:	f3 cf       	rjmp	.-26     	; 0x1bd0 <__addsf3x+0x38>
    1bea:	46 95       	lsr	r20
    1bec:	37 95       	ror	r19
    1bee:	27 95       	ror	r18
    1bf0:	a7 95       	ror	r26
    1bf2:	f0 40       	sbci	r31, 0x00	; 0
    1bf4:	53 95       	inc	r21
    1bf6:	c9 f7       	brne	.-14     	; 0x1bea <__addsf3x+0x52>
    1bf8:	7e f4       	brtc	.+30     	; 0x1c18 <__addsf3x+0x80>
    1bfa:	1f 16       	cp	r1, r31
    1bfc:	ba 0b       	sbc	r27, r26
    1bfe:	62 0b       	sbc	r22, r18
    1c00:	73 0b       	sbc	r23, r19
    1c02:	84 0b       	sbc	r24, r20
    1c04:	ba f0       	brmi	.+46     	; 0x1c34 <__addsf3x+0x9c>
    1c06:	91 50       	subi	r25, 0x01	; 1
    1c08:	a1 f0       	breq	.+40     	; 0x1c32 <__addsf3x+0x9a>
    1c0a:	ff 0f       	add	r31, r31
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	66 1f       	adc	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	88 1f       	adc	r24, r24
    1c14:	c2 f7       	brpl	.-16     	; 0x1c06 <__addsf3x+0x6e>
    1c16:	0e c0       	rjmp	.+28     	; 0x1c34 <__addsf3x+0x9c>
    1c18:	ba 0f       	add	r27, r26
    1c1a:	62 1f       	adc	r22, r18
    1c1c:	73 1f       	adc	r23, r19
    1c1e:	84 1f       	adc	r24, r20
    1c20:	48 f4       	brcc	.+18     	; 0x1c34 <__addsf3x+0x9c>
    1c22:	87 95       	ror	r24
    1c24:	77 95       	ror	r23
    1c26:	67 95       	ror	r22
    1c28:	b7 95       	ror	r27
    1c2a:	f7 95       	ror	r31
    1c2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <__addsf3x+0x9a>
    1c30:	b0 cf       	rjmp	.-160    	; 0x1b92 <__addsf3+0x28>
    1c32:	93 95       	inc	r25
    1c34:	88 0f       	add	r24, r24
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <__addsf3x+0xa2>
    1c38:	99 27       	eor	r25, r25
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	97 95       	ror	r25
    1c3e:	87 95       	ror	r24
    1c40:	08 95       	ret

00001c42 <__cmpsf2>:
    1c42:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__fp_cmp>
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <__cmpsf2+0x8>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 95       	ret

00001c4c <__divsf3>:
    1c4c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__divsf3x>
    1c50:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__fp_round>
    1c54:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_pscB>
    1c58:	58 f0       	brcs	.+22     	; 0x1c70 <__divsf3+0x24>
    1c5a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__fp_pscA>
    1c5e:	40 f0       	brcs	.+16     	; 0x1c70 <__divsf3+0x24>
    1c60:	29 f4       	brne	.+10     	; 0x1c6c <__divsf3+0x20>
    1c62:	5f 3f       	cpi	r21, 0xFF	; 255
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <__divsf3+0x24>
    1c66:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__fp_inf>
    1c6a:	51 11       	cpse	r21, r1
    1c6c:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__fp_szero>
    1c70:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_nan>

00001c74 <__divsf3x>:
    1c74:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fp_split3>
    1c78:	68 f3       	brcs	.-38     	; 0x1c54 <__divsf3+0x8>

00001c7a <__divsf3_pse>:
    1c7a:	99 23       	and	r25, r25
    1c7c:	b1 f3       	breq	.-20     	; 0x1c6a <__divsf3+0x1e>
    1c7e:	55 23       	and	r21, r21
    1c80:	91 f3       	breq	.-28     	; 0x1c66 <__divsf3+0x1a>
    1c82:	95 1b       	sub	r25, r21
    1c84:	55 0b       	sbc	r21, r21
    1c86:	bb 27       	eor	r27, r27
    1c88:	aa 27       	eor	r26, r26
    1c8a:	62 17       	cp	r22, r18
    1c8c:	73 07       	cpc	r23, r19
    1c8e:	84 07       	cpc	r24, r20
    1c90:	38 f0       	brcs	.+14     	; 0x1ca0 <__divsf3_pse+0x26>
    1c92:	9f 5f       	subi	r25, 0xFF	; 255
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	44 1f       	adc	r20, r20
    1c9c:	aa 1f       	adc	r26, r26
    1c9e:	a9 f3       	breq	.-22     	; 0x1c8a <__divsf3_pse+0x10>
    1ca0:	35 d0       	rcall	.+106    	; 0x1d0c <__divsf3_pse+0x92>
    1ca2:	0e 2e       	mov	r0, r30
    1ca4:	3a f0       	brmi	.+14     	; 0x1cb4 <__divsf3_pse+0x3a>
    1ca6:	e0 e8       	ldi	r30, 0x80	; 128
    1ca8:	32 d0       	rcall	.+100    	; 0x1d0e <__divsf3_pse+0x94>
    1caa:	91 50       	subi	r25, 0x01	; 1
    1cac:	50 40       	sbci	r21, 0x00	; 0
    1cae:	e6 95       	lsr	r30
    1cb0:	00 1c       	adc	r0, r0
    1cb2:	ca f7       	brpl	.-14     	; 0x1ca6 <__divsf3_pse+0x2c>
    1cb4:	2b d0       	rcall	.+86     	; 0x1d0c <__divsf3_pse+0x92>
    1cb6:	fe 2f       	mov	r31, r30
    1cb8:	29 d0       	rcall	.+82     	; 0x1d0c <__divsf3_pse+0x92>
    1cba:	66 0f       	add	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	88 1f       	adc	r24, r24
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	26 17       	cp	r18, r22
    1cc4:	37 07       	cpc	r19, r23
    1cc6:	48 07       	cpc	r20, r24
    1cc8:	ab 07       	cpc	r26, r27
    1cca:	b0 e8       	ldi	r27, 0x80	; 128
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <__divsf3_pse+0x56>
    1cce:	bb 0b       	sbc	r27, r27
    1cd0:	80 2d       	mov	r24, r0
    1cd2:	bf 01       	movw	r22, r30
    1cd4:	ff 27       	eor	r31, r31
    1cd6:	93 58       	subi	r25, 0x83	; 131
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	3a f0       	brmi	.+14     	; 0x1cea <__divsf3_pse+0x70>
    1cdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cde:	51 05       	cpc	r21, r1
    1ce0:	78 f0       	brcs	.+30     	; 0x1d00 <__divsf3_pse+0x86>
    1ce2:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__fp_inf>
    1ce6:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__fp_szero>
    1cea:	5f 3f       	cpi	r21, 0xFF	; 255
    1cec:	e4 f3       	brlt	.-8      	; 0x1ce6 <__divsf3_pse+0x6c>
    1cee:	98 3e       	cpi	r25, 0xE8	; 232
    1cf0:	d4 f3       	brlt	.-12     	; 0x1ce6 <__divsf3_pse+0x6c>
    1cf2:	86 95       	lsr	r24
    1cf4:	77 95       	ror	r23
    1cf6:	67 95       	ror	r22
    1cf8:	b7 95       	ror	r27
    1cfa:	f7 95       	ror	r31
    1cfc:	9f 5f       	subi	r25, 0xFF	; 255
    1cfe:	c9 f7       	brne	.-14     	; 0x1cf2 <__divsf3_pse+0x78>
    1d00:	88 0f       	add	r24, r24
    1d02:	91 1d       	adc	r25, r1
    1d04:	96 95       	lsr	r25
    1d06:	87 95       	ror	r24
    1d08:	97 f9       	bld	r25, 7
    1d0a:	08 95       	ret
    1d0c:	e1 e0       	ldi	r30, 0x01	; 1
    1d0e:	66 0f       	add	r22, r22
    1d10:	77 1f       	adc	r23, r23
    1d12:	88 1f       	adc	r24, r24
    1d14:	bb 1f       	adc	r27, r27
    1d16:	62 17       	cp	r22, r18
    1d18:	73 07       	cpc	r23, r19
    1d1a:	84 07       	cpc	r24, r20
    1d1c:	ba 07       	cpc	r27, r26
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <__divsf3_pse+0xae>
    1d20:	62 1b       	sub	r22, r18
    1d22:	73 0b       	sbc	r23, r19
    1d24:	84 0b       	sbc	r24, r20
    1d26:	ba 0b       	sbc	r27, r26
    1d28:	ee 1f       	adc	r30, r30
    1d2a:	88 f7       	brcc	.-30     	; 0x1d0e <__divsf3_pse+0x94>
    1d2c:	e0 95       	com	r30
    1d2e:	08 95       	ret

00001d30 <__fixsfsi>:
    1d30:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixunssfsi>
    1d34:	68 94       	set
    1d36:	b1 11       	cpse	r27, r1
    1d38:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__fp_szero>
    1d3c:	08 95       	ret

00001d3e <__fixunssfsi>:
    1d3e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__fp_splitA>
    1d42:	88 f0       	brcs	.+34     	; 0x1d66 <__fixunssfsi+0x28>
    1d44:	9f 57       	subi	r25, 0x7F	; 127
    1d46:	98 f0       	brcs	.+38     	; 0x1d6e <__fixunssfsi+0x30>
    1d48:	b9 2f       	mov	r27, r25
    1d4a:	99 27       	eor	r25, r25
    1d4c:	b7 51       	subi	r27, 0x17	; 23
    1d4e:	b0 f0       	brcs	.+44     	; 0x1d7c <__fixunssfsi+0x3e>
    1d50:	e1 f0       	breq	.+56     	; 0x1d8a <__fixunssfsi+0x4c>
    1d52:	66 0f       	add	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	1a f0       	brmi	.+6      	; 0x1d62 <__fixunssfsi+0x24>
    1d5c:	ba 95       	dec	r27
    1d5e:	c9 f7       	brne	.-14     	; 0x1d52 <__fixunssfsi+0x14>
    1d60:	14 c0       	rjmp	.+40     	; 0x1d8a <__fixunssfsi+0x4c>
    1d62:	b1 30       	cpi	r27, 0x01	; 1
    1d64:	91 f0       	breq	.+36     	; 0x1d8a <__fixunssfsi+0x4c>
    1d66:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fp_zero>
    1d6a:	b1 e0       	ldi	r27, 0x01	; 1
    1d6c:	08 95       	ret
    1d6e:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__fp_zero>
    1d72:	67 2f       	mov	r22, r23
    1d74:	78 2f       	mov	r23, r24
    1d76:	88 27       	eor	r24, r24
    1d78:	b8 5f       	subi	r27, 0xF8	; 248
    1d7a:	39 f0       	breq	.+14     	; 0x1d8a <__fixunssfsi+0x4c>
    1d7c:	b9 3f       	cpi	r27, 0xF9	; 249
    1d7e:	cc f3       	brlt	.-14     	; 0x1d72 <__fixunssfsi+0x34>
    1d80:	86 95       	lsr	r24
    1d82:	77 95       	ror	r23
    1d84:	67 95       	ror	r22
    1d86:	b3 95       	inc	r27
    1d88:	d9 f7       	brne	.-10     	; 0x1d80 <__fixunssfsi+0x42>
    1d8a:	3e f4       	brtc	.+14     	; 0x1d9a <__fixunssfsi+0x5c>
    1d8c:	90 95       	com	r25
    1d8e:	80 95       	com	r24
    1d90:	70 95       	com	r23
    1d92:	61 95       	neg	r22
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	8f 4f       	sbci	r24, 0xFF	; 255
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	08 95       	ret

00001d9c <__floatunsisf>:
    1d9c:	e8 94       	clt
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <__floatsisf+0x12>

00001da0 <__floatsisf>:
    1da0:	97 fb       	bst	r25, 7
    1da2:	3e f4       	brtc	.+14     	; 0x1db2 <__floatsisf+0x12>
    1da4:	90 95       	com	r25
    1da6:	80 95       	com	r24
    1da8:	70 95       	com	r23
    1daa:	61 95       	neg	r22
    1dac:	7f 4f       	sbci	r23, 0xFF	; 255
    1dae:	8f 4f       	sbci	r24, 0xFF	; 255
    1db0:	9f 4f       	sbci	r25, 0xFF	; 255
    1db2:	99 23       	and	r25, r25
    1db4:	a9 f0       	breq	.+42     	; 0x1de0 <__floatsisf+0x40>
    1db6:	f9 2f       	mov	r31, r25
    1db8:	96 e9       	ldi	r25, 0x96	; 150
    1dba:	bb 27       	eor	r27, r27
    1dbc:	93 95       	inc	r25
    1dbe:	f6 95       	lsr	r31
    1dc0:	87 95       	ror	r24
    1dc2:	77 95       	ror	r23
    1dc4:	67 95       	ror	r22
    1dc6:	b7 95       	ror	r27
    1dc8:	f1 11       	cpse	r31, r1
    1dca:	f8 cf       	rjmp	.-16     	; 0x1dbc <__floatsisf+0x1c>
    1dcc:	fa f4       	brpl	.+62     	; 0x1e0c <__floatsisf+0x6c>
    1dce:	bb 0f       	add	r27, r27
    1dd0:	11 f4       	brne	.+4      	; 0x1dd6 <__floatsisf+0x36>
    1dd2:	60 ff       	sbrs	r22, 0
    1dd4:	1b c0       	rjmp	.+54     	; 0x1e0c <__floatsisf+0x6c>
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	8f 4f       	sbci	r24, 0xFF	; 255
    1ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dde:	16 c0       	rjmp	.+44     	; 0x1e0c <__floatsisf+0x6c>
    1de0:	88 23       	and	r24, r24
    1de2:	11 f0       	breq	.+4      	; 0x1de8 <__floatsisf+0x48>
    1de4:	96 e9       	ldi	r25, 0x96	; 150
    1de6:	11 c0       	rjmp	.+34     	; 0x1e0a <__floatsisf+0x6a>
    1de8:	77 23       	and	r23, r23
    1dea:	21 f0       	breq	.+8      	; 0x1df4 <__floatsisf+0x54>
    1dec:	9e e8       	ldi	r25, 0x8E	; 142
    1dee:	87 2f       	mov	r24, r23
    1df0:	76 2f       	mov	r23, r22
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <__floatsisf+0x5e>
    1df4:	66 23       	and	r22, r22
    1df6:	71 f0       	breq	.+28     	; 0x1e14 <__floatsisf+0x74>
    1df8:	96 e8       	ldi	r25, 0x86	; 134
    1dfa:	86 2f       	mov	r24, r22
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	2a f0       	brmi	.+10     	; 0x1e0c <__floatsisf+0x6c>
    1e02:	9a 95       	dec	r25
    1e04:	66 0f       	add	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	88 1f       	adc	r24, r24
    1e0a:	da f7       	brpl	.-10     	; 0x1e02 <__floatsisf+0x62>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	96 95       	lsr	r25
    1e10:	87 95       	ror	r24
    1e12:	97 f9       	bld	r25, 7
    1e14:	08 95       	ret

00001e16 <__fp_cmp>:
    1e16:	99 0f       	add	r25, r25
    1e18:	00 08       	sbc	r0, r0
    1e1a:	55 0f       	add	r21, r21
    1e1c:	aa 0b       	sbc	r26, r26
    1e1e:	e0 e8       	ldi	r30, 0x80	; 128
    1e20:	fe ef       	ldi	r31, 0xFE	; 254
    1e22:	16 16       	cp	r1, r22
    1e24:	17 06       	cpc	r1, r23
    1e26:	e8 07       	cpc	r30, r24
    1e28:	f9 07       	cpc	r31, r25
    1e2a:	c0 f0       	brcs	.+48     	; 0x1e5c <__fp_cmp+0x46>
    1e2c:	12 16       	cp	r1, r18
    1e2e:	13 06       	cpc	r1, r19
    1e30:	e4 07       	cpc	r30, r20
    1e32:	f5 07       	cpc	r31, r21
    1e34:	98 f0       	brcs	.+38     	; 0x1e5c <__fp_cmp+0x46>
    1e36:	62 1b       	sub	r22, r18
    1e38:	73 0b       	sbc	r23, r19
    1e3a:	84 0b       	sbc	r24, r20
    1e3c:	95 0b       	sbc	r25, r21
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <__fp_cmp+0x38>
    1e40:	0a 26       	eor	r0, r26
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <__fp_cmp+0x46>
    1e44:	23 2b       	or	r18, r19
    1e46:	24 2b       	or	r18, r20
    1e48:	25 2b       	or	r18, r21
    1e4a:	21 f4       	brne	.+8      	; 0x1e54 <__fp_cmp+0x3e>
    1e4c:	08 95       	ret
    1e4e:	0a 26       	eor	r0, r26
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <__fp_cmp+0x3e>
    1e52:	a1 40       	sbci	r26, 0x01	; 1
    1e54:	a6 95       	lsr	r26
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	81 1d       	adc	r24, r1
    1e5a:	81 1d       	adc	r24, r1
    1e5c:	08 95       	ret

00001e5e <__fp_inf>:
    1e5e:	97 f9       	bld	r25, 7
    1e60:	9f 67       	ori	r25, 0x7F	; 127
    1e62:	80 e8       	ldi	r24, 0x80	; 128
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	08 95       	ret

00001e6a <__fp_nan>:
    1e6a:	9f ef       	ldi	r25, 0xFF	; 255
    1e6c:	80 ec       	ldi	r24, 0xC0	; 192
    1e6e:	08 95       	ret

00001e70 <__fp_pscA>:
    1e70:	00 24       	eor	r0, r0
    1e72:	0a 94       	dec	r0
    1e74:	16 16       	cp	r1, r22
    1e76:	17 06       	cpc	r1, r23
    1e78:	18 06       	cpc	r1, r24
    1e7a:	09 06       	cpc	r0, r25
    1e7c:	08 95       	ret

00001e7e <__fp_pscB>:
    1e7e:	00 24       	eor	r0, r0
    1e80:	0a 94       	dec	r0
    1e82:	12 16       	cp	r1, r18
    1e84:	13 06       	cpc	r1, r19
    1e86:	14 06       	cpc	r1, r20
    1e88:	05 06       	cpc	r0, r21
    1e8a:	08 95       	ret

00001e8c <__fp_round>:
    1e8c:	09 2e       	mov	r0, r25
    1e8e:	03 94       	inc	r0
    1e90:	00 0c       	add	r0, r0
    1e92:	11 f4       	brne	.+4      	; 0x1e98 <__fp_round+0xc>
    1e94:	88 23       	and	r24, r24
    1e96:	52 f0       	brmi	.+20     	; 0x1eac <__fp_round+0x20>
    1e98:	bb 0f       	add	r27, r27
    1e9a:	40 f4       	brcc	.+16     	; 0x1eac <__fp_round+0x20>
    1e9c:	bf 2b       	or	r27, r31
    1e9e:	11 f4       	brne	.+4      	; 0x1ea4 <__fp_round+0x18>
    1ea0:	60 ff       	sbrs	r22, 0
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <__fp_round+0x20>
    1ea4:	6f 5f       	subi	r22, 0xFF	; 255
    1ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1eac:	08 95       	ret

00001eae <__fp_split3>:
    1eae:	57 fd       	sbrc	r21, 7
    1eb0:	90 58       	subi	r25, 0x80	; 128
    1eb2:	44 0f       	add	r20, r20
    1eb4:	55 1f       	adc	r21, r21
    1eb6:	59 f0       	breq	.+22     	; 0x1ece <__fp_splitA+0x10>
    1eb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eba:	71 f0       	breq	.+28     	; 0x1ed8 <__fp_splitA+0x1a>
    1ebc:	47 95       	ror	r20

00001ebe <__fp_splitA>:
    1ebe:	88 0f       	add	r24, r24
    1ec0:	97 fb       	bst	r25, 7
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	61 f0       	breq	.+24     	; 0x1ede <__fp_splitA+0x20>
    1ec6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec8:	79 f0       	breq	.+30     	; 0x1ee8 <__fp_splitA+0x2a>
    1eca:	87 95       	ror	r24
    1ecc:	08 95       	ret
    1ece:	12 16       	cp	r1, r18
    1ed0:	13 06       	cpc	r1, r19
    1ed2:	14 06       	cpc	r1, r20
    1ed4:	55 1f       	adc	r21, r21
    1ed6:	f2 cf       	rjmp	.-28     	; 0x1ebc <__fp_split3+0xe>
    1ed8:	46 95       	lsr	r20
    1eda:	f1 df       	rcall	.-30     	; 0x1ebe <__fp_splitA>
    1edc:	08 c0       	rjmp	.+16     	; 0x1eee <__fp_splitA+0x30>
    1ede:	16 16       	cp	r1, r22
    1ee0:	17 06       	cpc	r1, r23
    1ee2:	18 06       	cpc	r1, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	f1 cf       	rjmp	.-30     	; 0x1eca <__fp_splitA+0xc>
    1ee8:	86 95       	lsr	r24
    1eea:	71 05       	cpc	r23, r1
    1eec:	61 05       	cpc	r22, r1
    1eee:	08 94       	sec
    1ef0:	08 95       	ret

00001ef2 <__fp_zero>:
    1ef2:	e8 94       	clt

00001ef4 <__fp_szero>:
    1ef4:	bb 27       	eor	r27, r27
    1ef6:	66 27       	eor	r22, r22
    1ef8:	77 27       	eor	r23, r23
    1efa:	cb 01       	movw	r24, r22
    1efc:	97 f9       	bld	r25, 7
    1efe:	08 95       	ret

00001f00 <__gesf2>:
    1f00:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__fp_cmp>
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <__gesf2+0x8>
    1f06:	8f ef       	ldi	r24, 0xFF	; 255
    1f08:	08 95       	ret

00001f0a <__mulsf3>:
    1f0a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__mulsf3x>
    1f0e:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__fp_round>
    1f12:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__fp_pscA>
    1f16:	38 f0       	brcs	.+14     	; 0x1f26 <__mulsf3+0x1c>
    1f18:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__fp_pscB>
    1f1c:	20 f0       	brcs	.+8      	; 0x1f26 <__mulsf3+0x1c>
    1f1e:	95 23       	and	r25, r21
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <__mulsf3+0x1c>
    1f22:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__fp_inf>
    1f26:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__fp_nan>
    1f2a:	11 24       	eor	r1, r1
    1f2c:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__fp_szero>

00001f30 <__mulsf3x>:
    1f30:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__fp_split3>
    1f34:	70 f3       	brcs	.-36     	; 0x1f12 <__mulsf3+0x8>

00001f36 <__mulsf3_pse>:
    1f36:	95 9f       	mul	r25, r21
    1f38:	c1 f3       	breq	.-16     	; 0x1f2a <__mulsf3+0x20>
    1f3a:	95 0f       	add	r25, r21
    1f3c:	50 e0       	ldi	r21, 0x00	; 0
    1f3e:	55 1f       	adc	r21, r21
    1f40:	62 9f       	mul	r22, r18
    1f42:	f0 01       	movw	r30, r0
    1f44:	72 9f       	mul	r23, r18
    1f46:	bb 27       	eor	r27, r27
    1f48:	f0 0d       	add	r31, r0
    1f4a:	b1 1d       	adc	r27, r1
    1f4c:	63 9f       	mul	r22, r19
    1f4e:	aa 27       	eor	r26, r26
    1f50:	f0 0d       	add	r31, r0
    1f52:	b1 1d       	adc	r27, r1
    1f54:	aa 1f       	adc	r26, r26
    1f56:	64 9f       	mul	r22, r20
    1f58:	66 27       	eor	r22, r22
    1f5a:	b0 0d       	add	r27, r0
    1f5c:	a1 1d       	adc	r26, r1
    1f5e:	66 1f       	adc	r22, r22
    1f60:	82 9f       	mul	r24, r18
    1f62:	22 27       	eor	r18, r18
    1f64:	b0 0d       	add	r27, r0
    1f66:	a1 1d       	adc	r26, r1
    1f68:	62 1f       	adc	r22, r18
    1f6a:	73 9f       	mul	r23, r19
    1f6c:	b0 0d       	add	r27, r0
    1f6e:	a1 1d       	adc	r26, r1
    1f70:	62 1f       	adc	r22, r18
    1f72:	83 9f       	mul	r24, r19
    1f74:	a0 0d       	add	r26, r0
    1f76:	61 1d       	adc	r22, r1
    1f78:	22 1f       	adc	r18, r18
    1f7a:	74 9f       	mul	r23, r20
    1f7c:	33 27       	eor	r19, r19
    1f7e:	a0 0d       	add	r26, r0
    1f80:	61 1d       	adc	r22, r1
    1f82:	23 1f       	adc	r18, r19
    1f84:	84 9f       	mul	r24, r20
    1f86:	60 0d       	add	r22, r0
    1f88:	21 1d       	adc	r18, r1
    1f8a:	82 2f       	mov	r24, r18
    1f8c:	76 2f       	mov	r23, r22
    1f8e:	6a 2f       	mov	r22, r26
    1f90:	11 24       	eor	r1, r1
    1f92:	9f 57       	subi	r25, 0x7F	; 127
    1f94:	50 40       	sbci	r21, 0x00	; 0
    1f96:	9a f0       	brmi	.+38     	; 0x1fbe <__mulsf3_pse+0x88>
    1f98:	f1 f0       	breq	.+60     	; 0x1fd6 <__mulsf3_pse+0xa0>
    1f9a:	88 23       	and	r24, r24
    1f9c:	4a f0       	brmi	.+18     	; 0x1fb0 <__mulsf3_pse+0x7a>
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	bb 1f       	adc	r27, r27
    1fa4:	66 1f       	adc	r22, r22
    1fa6:	77 1f       	adc	r23, r23
    1fa8:	88 1f       	adc	r24, r24
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	50 40       	sbci	r21, 0x00	; 0
    1fae:	a9 f7       	brne	.-22     	; 0x1f9a <__mulsf3_pse+0x64>
    1fb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb2:	51 05       	cpc	r21, r1
    1fb4:	80 f0       	brcs	.+32     	; 0x1fd6 <__mulsf3_pse+0xa0>
    1fb6:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__fp_inf>
    1fba:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__fp_szero>
    1fbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc0:	e4 f3       	brlt	.-8      	; 0x1fba <__mulsf3_pse+0x84>
    1fc2:	98 3e       	cpi	r25, 0xE8	; 232
    1fc4:	d4 f3       	brlt	.-12     	; 0x1fba <__mulsf3_pse+0x84>
    1fc6:	86 95       	lsr	r24
    1fc8:	77 95       	ror	r23
    1fca:	67 95       	ror	r22
    1fcc:	b7 95       	ror	r27
    1fce:	f7 95       	ror	r31
    1fd0:	e7 95       	ror	r30
    1fd2:	9f 5f       	subi	r25, 0xFF	; 255
    1fd4:	c1 f7       	brne	.-16     	; 0x1fc6 <__mulsf3_pse+0x90>
    1fd6:	fe 2b       	or	r31, r30
    1fd8:	88 0f       	add	r24, r24
    1fda:	91 1d       	adc	r25, r1
    1fdc:	96 95       	lsr	r25
    1fde:	87 95       	ror	r24
    1fe0:	97 f9       	bld	r25, 7
    1fe2:	08 95       	ret

00001fe4 <__divmodhi4>:
    1fe4:	97 fb       	bst	r25, 7
    1fe6:	07 2e       	mov	r0, r23
    1fe8:	16 f4       	brtc	.+4      	; 0x1fee <__divmodhi4+0xa>
    1fea:	00 94       	com	r0
    1fec:	07 d0       	rcall	.+14     	; 0x1ffc <__divmodhi4_neg1>
    1fee:	77 fd       	sbrc	r23, 7
    1ff0:	09 d0       	rcall	.+18     	; 0x2004 <__divmodhi4_neg2>
    1ff2:	0e 94 06 10 	call	0x200c	; 0x200c <__udivmodhi4>
    1ff6:	07 fc       	sbrc	r0, 7
    1ff8:	05 d0       	rcall	.+10     	; 0x2004 <__divmodhi4_neg2>
    1ffa:	3e f4       	brtc	.+14     	; 0x200a <__divmodhi4_exit>

00001ffc <__divmodhi4_neg1>:
    1ffc:	90 95       	com	r25
    1ffe:	81 95       	neg	r24
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	08 95       	ret

00002004 <__divmodhi4_neg2>:
    2004:	70 95       	com	r23
    2006:	61 95       	neg	r22
    2008:	7f 4f       	sbci	r23, 0xFF	; 255

0000200a <__divmodhi4_exit>:
    200a:	08 95       	ret

0000200c <__udivmodhi4>:
    200c:	aa 1b       	sub	r26, r26
    200e:	bb 1b       	sub	r27, r27
    2010:	51 e1       	ldi	r21, 0x11	; 17
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <__udivmodhi4_ep>

00002014 <__udivmodhi4_loop>:
    2014:	aa 1f       	adc	r26, r26
    2016:	bb 1f       	adc	r27, r27
    2018:	a6 17       	cp	r26, r22
    201a:	b7 07       	cpc	r27, r23
    201c:	10 f0       	brcs	.+4      	; 0x2022 <__udivmodhi4_ep>
    201e:	a6 1b       	sub	r26, r22
    2020:	b7 0b       	sbc	r27, r23

00002022 <__udivmodhi4_ep>:
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	5a 95       	dec	r21
    2028:	a9 f7       	brne	.-22     	; 0x2014 <__udivmodhi4_loop>
    202a:	80 95       	com	r24
    202c:	90 95       	com	r25
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	08 95       	ret

00002034 <fdevopen>:
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	31 f4       	brne	.+12     	; 0x204c <fdevopen+0x18>
    2040:	61 15       	cp	r22, r1
    2042:	71 05       	cpc	r23, r1
    2044:	19 f4       	brne	.+6      	; 0x204c <fdevopen+0x18>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	3a c0       	rjmp	.+116    	; 0x20c0 <fdevopen+0x8c>
    204c:	8b 01       	movw	r16, r22
    204e:	ec 01       	movw	r28, r24
    2050:	6e e0       	ldi	r22, 0x0E	; 14
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <calloc>
    205c:	fc 01       	movw	r30, r24
    205e:	89 2b       	or	r24, r25
    2060:	91 f3       	breq	.-28     	; 0x2046 <fdevopen+0x12>
    2062:	80 e8       	ldi	r24, 0x80	; 128
    2064:	83 83       	std	Z+3, r24	; 0x03
    2066:	01 15       	cp	r16, r1
    2068:	11 05       	cpc	r17, r1
    206a:	71 f0       	breq	.+28     	; 0x2088 <fdevopen+0x54>
    206c:	13 87       	std	Z+11, r17	; 0x0b
    206e:	02 87       	std	Z+10, r16	; 0x0a
    2070:	81 e8       	ldi	r24, 0x81	; 129
    2072:	83 83       	std	Z+3, r24	; 0x03
    2074:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <__iob>
    2078:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <__iob+0x1>
    207c:	89 2b       	or	r24, r25
    207e:	21 f4       	brne	.+8      	; 0x2088 <fdevopen+0x54>
    2080:	f0 93 31 03 	sts	0x0331, r31	; 0x800331 <__iob+0x1>
    2084:	e0 93 30 03 	sts	0x0330, r30	; 0x800330 <__iob>
    2088:	20 97       	sbiw	r28, 0x00	; 0
    208a:	c9 f0       	breq	.+50     	; 0x20be <fdevopen+0x8a>
    208c:	d1 87       	std	Z+9, r29	; 0x09
    208e:	c0 87       	std	Z+8, r28	; 0x08
    2090:	83 81       	ldd	r24, Z+3	; 0x03
    2092:	82 60       	ori	r24, 0x02	; 2
    2094:	83 83       	std	Z+3, r24	; 0x03
    2096:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__iob+0x2>
    209a:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <__iob+0x3>
    209e:	89 2b       	or	r24, r25
    20a0:	71 f4       	brne	.+28     	; 0x20be <fdevopen+0x8a>
    20a2:	f0 93 33 03 	sts	0x0333, r31	; 0x800333 <__iob+0x3>
    20a6:	e0 93 32 03 	sts	0x0332, r30	; 0x800332 <__iob+0x2>
    20aa:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <__iob+0x4>
    20ae:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <__iob+0x5>
    20b2:	89 2b       	or	r24, r25
    20b4:	21 f4       	brne	.+8      	; 0x20be <fdevopen+0x8a>
    20b6:	f0 93 35 03 	sts	0x0335, r31	; 0x800335 <__iob+0x5>
    20ba:	e0 93 34 03 	sts	0x0334, r30	; 0x800334 <__iob+0x4>
    20be:	cf 01       	movw	r24, r30
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <printf>:
    20ca:	a0 e0       	ldi	r26, 0x00	; 0
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e6       	ldi	r30, 0x6B	; 107
    20d0:	f0 e1       	ldi	r31, 0x10	; 16
    20d2:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__prologue_saves__+0x20>
    20d6:	ae 01       	movw	r20, r28
    20d8:	4b 5f       	subi	r20, 0xFB	; 251
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	fa 01       	movw	r30, r20
    20de:	61 91       	ld	r22, Z+
    20e0:	71 91       	ld	r23, Z+
    20e2:	af 01       	movw	r20, r30
    20e4:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__iob+0x2>
    20e8:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <__iob+0x3>
    20ec:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <vfprintf>
    20f0:	e2 e0       	ldi	r30, 0x02	; 2
    20f2:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__epilogue_restores__+0x20>

000020f6 <vfprintf>:
    20f6:	ab e0       	ldi	r26, 0x0B	; 11
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e1 e8       	ldi	r30, 0x81	; 129
    20fc:	f0 e1       	ldi	r31, 0x10	; 16
    20fe:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__>
    2102:	6c 01       	movw	r12, r24
    2104:	7b 01       	movw	r14, r22
    2106:	8a 01       	movw	r16, r20
    2108:	fc 01       	movw	r30, r24
    210a:	17 82       	std	Z+7, r1	; 0x07
    210c:	16 82       	std	Z+6, r1	; 0x06
    210e:	83 81       	ldd	r24, Z+3	; 0x03
    2110:	81 ff       	sbrs	r24, 1
    2112:	cc c1       	rjmp	.+920    	; 0x24ac <vfprintf+0x3b6>
    2114:	ce 01       	movw	r24, r28
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	3c 01       	movw	r6, r24
    211a:	f6 01       	movw	r30, r12
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	f7 01       	movw	r30, r14
    2120:	93 fd       	sbrc	r25, 3
    2122:	85 91       	lpm	r24, Z+
    2124:	93 ff       	sbrs	r25, 3
    2126:	81 91       	ld	r24, Z+
    2128:	7f 01       	movw	r14, r30
    212a:	88 23       	and	r24, r24
    212c:	09 f4       	brne	.+2      	; 0x2130 <vfprintf+0x3a>
    212e:	ba c1       	rjmp	.+884    	; 0x24a4 <vfprintf+0x3ae>
    2130:	85 32       	cpi	r24, 0x25	; 37
    2132:	39 f4       	brne	.+14     	; 0x2142 <vfprintf+0x4c>
    2134:	93 fd       	sbrc	r25, 3
    2136:	85 91       	lpm	r24, Z+
    2138:	93 ff       	sbrs	r25, 3
    213a:	81 91       	ld	r24, Z+
    213c:	7f 01       	movw	r14, r30
    213e:	85 32       	cpi	r24, 0x25	; 37
    2140:	29 f4       	brne	.+10     	; 0x214c <vfprintf+0x56>
    2142:	b6 01       	movw	r22, r12
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    214a:	e7 cf       	rjmp	.-50     	; 0x211a <vfprintf+0x24>
    214c:	91 2c       	mov	r9, r1
    214e:	21 2c       	mov	r2, r1
    2150:	31 2c       	mov	r3, r1
    2152:	ff e1       	ldi	r31, 0x1F	; 31
    2154:	f3 15       	cp	r31, r3
    2156:	d8 f0       	brcs	.+54     	; 0x218e <vfprintf+0x98>
    2158:	8b 32       	cpi	r24, 0x2B	; 43
    215a:	79 f0       	breq	.+30     	; 0x217a <vfprintf+0x84>
    215c:	38 f4       	brcc	.+14     	; 0x216c <vfprintf+0x76>
    215e:	80 32       	cpi	r24, 0x20	; 32
    2160:	79 f0       	breq	.+30     	; 0x2180 <vfprintf+0x8a>
    2162:	83 32       	cpi	r24, 0x23	; 35
    2164:	a1 f4       	brne	.+40     	; 0x218e <vfprintf+0x98>
    2166:	23 2d       	mov	r18, r3
    2168:	20 61       	ori	r18, 0x10	; 16
    216a:	1d c0       	rjmp	.+58     	; 0x21a6 <vfprintf+0xb0>
    216c:	8d 32       	cpi	r24, 0x2D	; 45
    216e:	61 f0       	breq	.+24     	; 0x2188 <vfprintf+0x92>
    2170:	80 33       	cpi	r24, 0x30	; 48
    2172:	69 f4       	brne	.+26     	; 0x218e <vfprintf+0x98>
    2174:	23 2d       	mov	r18, r3
    2176:	21 60       	ori	r18, 0x01	; 1
    2178:	16 c0       	rjmp	.+44     	; 0x21a6 <vfprintf+0xb0>
    217a:	83 2d       	mov	r24, r3
    217c:	82 60       	ori	r24, 0x02	; 2
    217e:	38 2e       	mov	r3, r24
    2180:	e3 2d       	mov	r30, r3
    2182:	e4 60       	ori	r30, 0x04	; 4
    2184:	3e 2e       	mov	r3, r30
    2186:	2a c0       	rjmp	.+84     	; 0x21dc <vfprintf+0xe6>
    2188:	f3 2d       	mov	r31, r3
    218a:	f8 60       	ori	r31, 0x08	; 8
    218c:	1d c0       	rjmp	.+58     	; 0x21c8 <vfprintf+0xd2>
    218e:	37 fc       	sbrc	r3, 7
    2190:	2d c0       	rjmp	.+90     	; 0x21ec <vfprintf+0xf6>
    2192:	20 ed       	ldi	r18, 0xD0	; 208
    2194:	28 0f       	add	r18, r24
    2196:	2a 30       	cpi	r18, 0x0A	; 10
    2198:	40 f0       	brcs	.+16     	; 0x21aa <vfprintf+0xb4>
    219a:	8e 32       	cpi	r24, 0x2E	; 46
    219c:	b9 f4       	brne	.+46     	; 0x21cc <vfprintf+0xd6>
    219e:	36 fc       	sbrc	r3, 6
    21a0:	81 c1       	rjmp	.+770    	; 0x24a4 <vfprintf+0x3ae>
    21a2:	23 2d       	mov	r18, r3
    21a4:	20 64       	ori	r18, 0x40	; 64
    21a6:	32 2e       	mov	r3, r18
    21a8:	19 c0       	rjmp	.+50     	; 0x21dc <vfprintf+0xe6>
    21aa:	36 fe       	sbrs	r3, 6
    21ac:	06 c0       	rjmp	.+12     	; 0x21ba <vfprintf+0xc4>
    21ae:	8a e0       	ldi	r24, 0x0A	; 10
    21b0:	98 9e       	mul	r9, r24
    21b2:	20 0d       	add	r18, r0
    21b4:	11 24       	eor	r1, r1
    21b6:	92 2e       	mov	r9, r18
    21b8:	11 c0       	rjmp	.+34     	; 0x21dc <vfprintf+0xe6>
    21ba:	ea e0       	ldi	r30, 0x0A	; 10
    21bc:	2e 9e       	mul	r2, r30
    21be:	20 0d       	add	r18, r0
    21c0:	11 24       	eor	r1, r1
    21c2:	22 2e       	mov	r2, r18
    21c4:	f3 2d       	mov	r31, r3
    21c6:	f0 62       	ori	r31, 0x20	; 32
    21c8:	3f 2e       	mov	r3, r31
    21ca:	08 c0       	rjmp	.+16     	; 0x21dc <vfprintf+0xe6>
    21cc:	8c 36       	cpi	r24, 0x6C	; 108
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <vfprintf+0xe2>
    21d0:	83 2d       	mov	r24, r3
    21d2:	80 68       	ori	r24, 0x80	; 128
    21d4:	38 2e       	mov	r3, r24
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <vfprintf+0xe6>
    21d8:	88 36       	cpi	r24, 0x68	; 104
    21da:	41 f4       	brne	.+16     	; 0x21ec <vfprintf+0xf6>
    21dc:	f7 01       	movw	r30, r14
    21de:	93 fd       	sbrc	r25, 3
    21e0:	85 91       	lpm	r24, Z+
    21e2:	93 ff       	sbrs	r25, 3
    21e4:	81 91       	ld	r24, Z+
    21e6:	7f 01       	movw	r14, r30
    21e8:	81 11       	cpse	r24, r1
    21ea:	b3 cf       	rjmp	.-154    	; 0x2152 <vfprintf+0x5c>
    21ec:	98 2f       	mov	r25, r24
    21ee:	9f 7d       	andi	r25, 0xDF	; 223
    21f0:	95 54       	subi	r25, 0x45	; 69
    21f2:	93 30       	cpi	r25, 0x03	; 3
    21f4:	28 f4       	brcc	.+10     	; 0x2200 <vfprintf+0x10a>
    21f6:	0c 5f       	subi	r16, 0xFC	; 252
    21f8:	1f 4f       	sbci	r17, 0xFF	; 255
    21fa:	9f e3       	ldi	r25, 0x3F	; 63
    21fc:	99 83       	std	Y+1, r25	; 0x01
    21fe:	0d c0       	rjmp	.+26     	; 0x221a <vfprintf+0x124>
    2200:	83 36       	cpi	r24, 0x63	; 99
    2202:	31 f0       	breq	.+12     	; 0x2210 <vfprintf+0x11a>
    2204:	83 37       	cpi	r24, 0x73	; 115
    2206:	71 f0       	breq	.+28     	; 0x2224 <vfprintf+0x12e>
    2208:	83 35       	cpi	r24, 0x53	; 83
    220a:	09 f0       	breq	.+2      	; 0x220e <vfprintf+0x118>
    220c:	59 c0       	rjmp	.+178    	; 0x22c0 <vfprintf+0x1ca>
    220e:	21 c0       	rjmp	.+66     	; 0x2252 <vfprintf+0x15c>
    2210:	f8 01       	movw	r30, r16
    2212:	80 81       	ld	r24, Z
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	0e 5f       	subi	r16, 0xFE	; 254
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	88 24       	eor	r8, r8
    221c:	83 94       	inc	r8
    221e:	91 2c       	mov	r9, r1
    2220:	53 01       	movw	r10, r6
    2222:	13 c0       	rjmp	.+38     	; 0x224a <vfprintf+0x154>
    2224:	28 01       	movw	r4, r16
    2226:	f2 e0       	ldi	r31, 0x02	; 2
    2228:	4f 0e       	add	r4, r31
    222a:	51 1c       	adc	r5, r1
    222c:	f8 01       	movw	r30, r16
    222e:	a0 80       	ld	r10, Z
    2230:	b1 80       	ldd	r11, Z+1	; 0x01
    2232:	36 fe       	sbrs	r3, 6
    2234:	03 c0       	rjmp	.+6      	; 0x223c <vfprintf+0x146>
    2236:	69 2d       	mov	r22, r9
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <vfprintf+0x14a>
    223c:	6f ef       	ldi	r22, 0xFF	; 255
    223e:	7f ef       	ldi	r23, 0xFF	; 255
    2240:	c5 01       	movw	r24, r10
    2242:	0e 94 ab 13 	call	0x2756	; 0x2756 <strnlen>
    2246:	4c 01       	movw	r8, r24
    2248:	82 01       	movw	r16, r4
    224a:	f3 2d       	mov	r31, r3
    224c:	ff 77       	andi	r31, 0x7F	; 127
    224e:	3f 2e       	mov	r3, r31
    2250:	16 c0       	rjmp	.+44     	; 0x227e <vfprintf+0x188>
    2252:	28 01       	movw	r4, r16
    2254:	22 e0       	ldi	r18, 0x02	; 2
    2256:	42 0e       	add	r4, r18
    2258:	51 1c       	adc	r5, r1
    225a:	f8 01       	movw	r30, r16
    225c:	a0 80       	ld	r10, Z
    225e:	b1 80       	ldd	r11, Z+1	; 0x01
    2260:	36 fe       	sbrs	r3, 6
    2262:	03 c0       	rjmp	.+6      	; 0x226a <vfprintf+0x174>
    2264:	69 2d       	mov	r22, r9
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	02 c0       	rjmp	.+4      	; 0x226e <vfprintf+0x178>
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	7f ef       	ldi	r23, 0xFF	; 255
    226e:	c5 01       	movw	r24, r10
    2270:	0e 94 99 13 	call	0x2732	; 0x2732 <strnlen_P>
    2274:	4c 01       	movw	r8, r24
    2276:	f3 2d       	mov	r31, r3
    2278:	f0 68       	ori	r31, 0x80	; 128
    227a:	3f 2e       	mov	r3, r31
    227c:	82 01       	movw	r16, r4
    227e:	33 fc       	sbrc	r3, 3
    2280:	1b c0       	rjmp	.+54     	; 0x22b8 <vfprintf+0x1c2>
    2282:	82 2d       	mov	r24, r2
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	88 16       	cp	r8, r24
    2288:	99 06       	cpc	r9, r25
    228a:	b0 f4       	brcc	.+44     	; 0x22b8 <vfprintf+0x1c2>
    228c:	b6 01       	movw	r22, r12
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2296:	2a 94       	dec	r2
    2298:	f4 cf       	rjmp	.-24     	; 0x2282 <vfprintf+0x18c>
    229a:	f5 01       	movw	r30, r10
    229c:	37 fc       	sbrc	r3, 7
    229e:	85 91       	lpm	r24, Z+
    22a0:	37 fe       	sbrs	r3, 7
    22a2:	81 91       	ld	r24, Z+
    22a4:	5f 01       	movw	r10, r30
    22a6:	b6 01       	movw	r22, r12
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    22ae:	21 10       	cpse	r2, r1
    22b0:	2a 94       	dec	r2
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	82 1a       	sub	r8, r18
    22b6:	91 08       	sbc	r9, r1
    22b8:	81 14       	cp	r8, r1
    22ba:	91 04       	cpc	r9, r1
    22bc:	71 f7       	brne	.-36     	; 0x229a <vfprintf+0x1a4>
    22be:	e8 c0       	rjmp	.+464    	; 0x2490 <vfprintf+0x39a>
    22c0:	84 36       	cpi	r24, 0x64	; 100
    22c2:	11 f0       	breq	.+4      	; 0x22c8 <vfprintf+0x1d2>
    22c4:	89 36       	cpi	r24, 0x69	; 105
    22c6:	41 f5       	brne	.+80     	; 0x2318 <vfprintf+0x222>
    22c8:	f8 01       	movw	r30, r16
    22ca:	37 fe       	sbrs	r3, 7
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <vfprintf+0x1e6>
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0c 5f       	subi	r16, 0xFC	; 252
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <vfprintf+0x1f6>
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	07 2e       	mov	r0, r23
    22e2:	00 0c       	add	r0, r0
    22e4:	88 0b       	sbc	r24, r24
    22e6:	99 0b       	sbc	r25, r25
    22e8:	0e 5f       	subi	r16, 0xFE	; 254
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	f3 2d       	mov	r31, r3
    22ee:	ff 76       	andi	r31, 0x6F	; 111
    22f0:	3f 2e       	mov	r3, r31
    22f2:	97 ff       	sbrs	r25, 7
    22f4:	09 c0       	rjmp	.+18     	; 0x2308 <vfprintf+0x212>
    22f6:	90 95       	com	r25
    22f8:	80 95       	com	r24
    22fa:	70 95       	com	r23
    22fc:	61 95       	neg	r22
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	8f 4f       	sbci	r24, 0xFF	; 255
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	f0 68       	ori	r31, 0x80	; 128
    2306:	3f 2e       	mov	r3, r31
    2308:	2a e0       	ldi	r18, 0x0A	; 10
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	a3 01       	movw	r20, r6
    230e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__ultoa_invert>
    2312:	88 2e       	mov	r8, r24
    2314:	86 18       	sub	r8, r6
    2316:	45 c0       	rjmp	.+138    	; 0x23a2 <vfprintf+0x2ac>
    2318:	85 37       	cpi	r24, 0x75	; 117
    231a:	31 f4       	brne	.+12     	; 0x2328 <vfprintf+0x232>
    231c:	23 2d       	mov	r18, r3
    231e:	2f 7e       	andi	r18, 0xEF	; 239
    2320:	b2 2e       	mov	r11, r18
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	25 c0       	rjmp	.+74     	; 0x2372 <vfprintf+0x27c>
    2328:	93 2d       	mov	r25, r3
    232a:	99 7f       	andi	r25, 0xF9	; 249
    232c:	b9 2e       	mov	r11, r25
    232e:	8f 36       	cpi	r24, 0x6F	; 111
    2330:	c1 f0       	breq	.+48     	; 0x2362 <vfprintf+0x26c>
    2332:	18 f4       	brcc	.+6      	; 0x233a <vfprintf+0x244>
    2334:	88 35       	cpi	r24, 0x58	; 88
    2336:	79 f0       	breq	.+30     	; 0x2356 <vfprintf+0x260>
    2338:	b5 c0       	rjmp	.+362    	; 0x24a4 <vfprintf+0x3ae>
    233a:	80 37       	cpi	r24, 0x70	; 112
    233c:	19 f0       	breq	.+6      	; 0x2344 <vfprintf+0x24e>
    233e:	88 37       	cpi	r24, 0x78	; 120
    2340:	21 f0       	breq	.+8      	; 0x234a <vfprintf+0x254>
    2342:	b0 c0       	rjmp	.+352    	; 0x24a4 <vfprintf+0x3ae>
    2344:	e9 2f       	mov	r30, r25
    2346:	e0 61       	ori	r30, 0x10	; 16
    2348:	be 2e       	mov	r11, r30
    234a:	b4 fe       	sbrs	r11, 4
    234c:	0d c0       	rjmp	.+26     	; 0x2368 <vfprintf+0x272>
    234e:	fb 2d       	mov	r31, r11
    2350:	f4 60       	ori	r31, 0x04	; 4
    2352:	bf 2e       	mov	r11, r31
    2354:	09 c0       	rjmp	.+18     	; 0x2368 <vfprintf+0x272>
    2356:	34 fe       	sbrs	r3, 4
    2358:	0a c0       	rjmp	.+20     	; 0x236e <vfprintf+0x278>
    235a:	29 2f       	mov	r18, r25
    235c:	26 60       	ori	r18, 0x06	; 6
    235e:	b2 2e       	mov	r11, r18
    2360:	06 c0       	rjmp	.+12     	; 0x236e <vfprintf+0x278>
    2362:	28 e0       	ldi	r18, 0x08	; 8
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <vfprintf+0x27c>
    2368:	20 e1       	ldi	r18, 0x10	; 16
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x27c>
    236e:	20 e1       	ldi	r18, 0x10	; 16
    2370:	32 e0       	ldi	r19, 0x02	; 2
    2372:	f8 01       	movw	r30, r16
    2374:	b7 fe       	sbrs	r11, 7
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <vfprintf+0x290>
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	0c 5f       	subi	r16, 0xFC	; 252
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <vfprintf+0x29c>
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 5f       	subi	r16, 0xFE	; 254
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	a3 01       	movw	r20, r6
    2394:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__ultoa_invert>
    2398:	88 2e       	mov	r8, r24
    239a:	86 18       	sub	r8, r6
    239c:	fb 2d       	mov	r31, r11
    239e:	ff 77       	andi	r31, 0x7F	; 127
    23a0:	3f 2e       	mov	r3, r31
    23a2:	36 fe       	sbrs	r3, 6
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <vfprintf+0x2ca>
    23a6:	23 2d       	mov	r18, r3
    23a8:	2e 7f       	andi	r18, 0xFE	; 254
    23aa:	a2 2e       	mov	r10, r18
    23ac:	89 14       	cp	r8, r9
    23ae:	58 f4       	brcc	.+22     	; 0x23c6 <vfprintf+0x2d0>
    23b0:	34 fe       	sbrs	r3, 4
    23b2:	0b c0       	rjmp	.+22     	; 0x23ca <vfprintf+0x2d4>
    23b4:	32 fc       	sbrc	r3, 2
    23b6:	09 c0       	rjmp	.+18     	; 0x23ca <vfprintf+0x2d4>
    23b8:	83 2d       	mov	r24, r3
    23ba:	8e 7e       	andi	r24, 0xEE	; 238
    23bc:	a8 2e       	mov	r10, r24
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <vfprintf+0x2d4>
    23c0:	b8 2c       	mov	r11, r8
    23c2:	a3 2c       	mov	r10, r3
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <vfprintf+0x2d6>
    23c6:	b8 2c       	mov	r11, r8
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <vfprintf+0x2d6>
    23ca:	b9 2c       	mov	r11, r9
    23cc:	a4 fe       	sbrs	r10, 4
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <vfprintf+0x2f8>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e8 0d       	add	r30, r8
    23d4:	f1 1d       	adc	r31, r1
    23d6:	80 81       	ld	r24, Z
    23d8:	80 33       	cpi	r24, 0x30	; 48
    23da:	21 f4       	brne	.+8      	; 0x23e4 <vfprintf+0x2ee>
    23dc:	9a 2d       	mov	r25, r10
    23de:	99 7e       	andi	r25, 0xE9	; 233
    23e0:	a9 2e       	mov	r10, r25
    23e2:	09 c0       	rjmp	.+18     	; 0x23f6 <vfprintf+0x300>
    23e4:	a2 fe       	sbrs	r10, 2
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <vfprintf+0x2fe>
    23e8:	b3 94       	inc	r11
    23ea:	b3 94       	inc	r11
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <vfprintf+0x300>
    23ee:	8a 2d       	mov	r24, r10
    23f0:	86 78       	andi	r24, 0x86	; 134
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <vfprintf+0x300>
    23f4:	b3 94       	inc	r11
    23f6:	a3 fc       	sbrc	r10, 3
    23f8:	11 c0       	rjmp	.+34     	; 0x241c <vfprintf+0x326>
    23fa:	a0 fe       	sbrs	r10, 0
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <vfprintf+0x314>
    23fe:	b2 14       	cp	r11, r2
    2400:	88 f4       	brcc	.+34     	; 0x2424 <vfprintf+0x32e>
    2402:	28 0c       	add	r2, r8
    2404:	92 2c       	mov	r9, r2
    2406:	9b 18       	sub	r9, r11
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <vfprintf+0x330>
    240a:	b2 14       	cp	r11, r2
    240c:	60 f4       	brcc	.+24     	; 0x2426 <vfprintf+0x330>
    240e:	b6 01       	movw	r22, r12
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2418:	b3 94       	inc	r11
    241a:	f7 cf       	rjmp	.-18     	; 0x240a <vfprintf+0x314>
    241c:	b2 14       	cp	r11, r2
    241e:	18 f4       	brcc	.+6      	; 0x2426 <vfprintf+0x330>
    2420:	2b 18       	sub	r2, r11
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <vfprintf+0x332>
    2424:	98 2c       	mov	r9, r8
    2426:	21 2c       	mov	r2, r1
    2428:	a4 fe       	sbrs	r10, 4
    242a:	10 c0       	rjmp	.+32     	; 0x244c <vfprintf+0x356>
    242c:	b6 01       	movw	r22, r12
    242e:	80 e3       	ldi	r24, 0x30	; 48
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2436:	a2 fe       	sbrs	r10, 2
    2438:	17 c0       	rjmp	.+46     	; 0x2468 <vfprintf+0x372>
    243a:	a1 fc       	sbrc	r10, 1
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <vfprintf+0x34e>
    243e:	88 e7       	ldi	r24, 0x78	; 120
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <vfprintf+0x352>
    2444:	88 e5       	ldi	r24, 0x58	; 88
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	b6 01       	movw	r22, r12
    244a:	0c c0       	rjmp	.+24     	; 0x2464 <vfprintf+0x36e>
    244c:	8a 2d       	mov	r24, r10
    244e:	86 78       	andi	r24, 0x86	; 134
    2450:	59 f0       	breq	.+22     	; 0x2468 <vfprintf+0x372>
    2452:	a1 fe       	sbrs	r10, 1
    2454:	02 c0       	rjmp	.+4      	; 0x245a <vfprintf+0x364>
    2456:	8b e2       	ldi	r24, 0x2B	; 43
    2458:	01 c0       	rjmp	.+2      	; 0x245c <vfprintf+0x366>
    245a:	80 e2       	ldi	r24, 0x20	; 32
    245c:	a7 fc       	sbrc	r10, 7
    245e:	8d e2       	ldi	r24, 0x2D	; 45
    2460:	b6 01       	movw	r22, r12
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2468:	89 14       	cp	r8, r9
    246a:	38 f4       	brcc	.+14     	; 0x247a <vfprintf+0x384>
    246c:	b6 01       	movw	r22, r12
    246e:	80 e3       	ldi	r24, 0x30	; 48
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2476:	9a 94       	dec	r9
    2478:	f7 cf       	rjmp	.-18     	; 0x2468 <vfprintf+0x372>
    247a:	8a 94       	dec	r8
    247c:	f3 01       	movw	r30, r6
    247e:	e8 0d       	add	r30, r8
    2480:	f1 1d       	adc	r31, r1
    2482:	80 81       	ld	r24, Z
    2484:	b6 01       	movw	r22, r12
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    248c:	81 10       	cpse	r8, r1
    248e:	f5 cf       	rjmp	.-22     	; 0x247a <vfprintf+0x384>
    2490:	22 20       	and	r2, r2
    2492:	09 f4       	brne	.+2      	; 0x2496 <vfprintf+0x3a0>
    2494:	42 ce       	rjmp	.-892    	; 0x211a <vfprintf+0x24>
    2496:	b6 01       	movw	r22, r12
    2498:	80 e2       	ldi	r24, 0x20	; 32
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    24a0:	2a 94       	dec	r2
    24a2:	f6 cf       	rjmp	.-20     	; 0x2490 <vfprintf+0x39a>
    24a4:	f6 01       	movw	r30, r12
    24a6:	86 81       	ldd	r24, Z+6	; 0x06
    24a8:	97 81       	ldd	r25, Z+7	; 0x07
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <vfprintf+0x3ba>
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	9f ef       	ldi	r25, 0xFF	; 255
    24b0:	2b 96       	adiw	r28, 0x0b	; 11
    24b2:	e2 e1       	ldi	r30, 0x12	; 18
    24b4:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__>

000024b8 <calloc>:
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	86 9f       	mul	r24, r22
    24c2:	80 01       	movw	r16, r0
    24c4:	87 9f       	mul	r24, r23
    24c6:	10 0d       	add	r17, r0
    24c8:	96 9f       	mul	r25, r22
    24ca:	10 0d       	add	r17, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	c8 01       	movw	r24, r16
    24d0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <malloc>
    24d4:	ec 01       	movw	r28, r24
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	29 f0       	breq	.+10     	; 0x24e4 <calloc+0x2c>
    24da:	a8 01       	movw	r20, r16
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	0e 94 a4 13 	call	0x2748	; 0x2748 <memset>
    24e4:	ce 01       	movw	r24, r28
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	08 95       	ret

000024f0 <malloc>:
    24f0:	0f 93       	push	r16
    24f2:	1f 93       	push	r17
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	82 30       	cpi	r24, 0x02	; 2
    24fa:	91 05       	cpc	r25, r1
    24fc:	10 f4       	brcc	.+4      	; 0x2502 <malloc+0x12>
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__flp>
    2506:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__flp+0x1>
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	30 97       	sbiw	r30, 0x00	; 0
    2514:	19 f1       	breq	.+70     	; 0x255c <malloc+0x6c>
    2516:	40 81       	ld	r20, Z
    2518:	51 81       	ldd	r21, Z+1	; 0x01
    251a:	02 81       	ldd	r16, Z+2	; 0x02
    251c:	13 81       	ldd	r17, Z+3	; 0x03
    251e:	48 17       	cp	r20, r24
    2520:	59 07       	cpc	r21, r25
    2522:	c8 f0       	brcs	.+50     	; 0x2556 <malloc+0x66>
    2524:	84 17       	cp	r24, r20
    2526:	95 07       	cpc	r25, r21
    2528:	69 f4       	brne	.+26     	; 0x2544 <malloc+0x54>
    252a:	10 97       	sbiw	r26, 0x00	; 0
    252c:	31 f0       	breq	.+12     	; 0x253a <malloc+0x4a>
    252e:	12 96       	adiw	r26, 0x02	; 2
    2530:	0c 93       	st	X, r16
    2532:	12 97       	sbiw	r26, 0x02	; 2
    2534:	13 96       	adiw	r26, 0x03	; 3
    2536:	1c 93       	st	X, r17
    2538:	27 c0       	rjmp	.+78     	; 0x2588 <malloc+0x98>
    253a:	00 93 38 03 	sts	0x0338, r16	; 0x800338 <__flp>
    253e:	10 93 39 03 	sts	0x0339, r17	; 0x800339 <__flp+0x1>
    2542:	22 c0       	rjmp	.+68     	; 0x2588 <malloc+0x98>
    2544:	21 15       	cp	r18, r1
    2546:	31 05       	cpc	r19, r1
    2548:	19 f0       	breq	.+6      	; 0x2550 <malloc+0x60>
    254a:	42 17       	cp	r20, r18
    254c:	53 07       	cpc	r21, r19
    254e:	18 f4       	brcc	.+6      	; 0x2556 <malloc+0x66>
    2550:	9a 01       	movw	r18, r20
    2552:	bd 01       	movw	r22, r26
    2554:	ef 01       	movw	r28, r30
    2556:	df 01       	movw	r26, r30
    2558:	f8 01       	movw	r30, r16
    255a:	db cf       	rjmp	.-74     	; 0x2512 <malloc+0x22>
    255c:	21 15       	cp	r18, r1
    255e:	31 05       	cpc	r19, r1
    2560:	f9 f0       	breq	.+62     	; 0x25a0 <malloc+0xb0>
    2562:	28 1b       	sub	r18, r24
    2564:	39 0b       	sbc	r19, r25
    2566:	24 30       	cpi	r18, 0x04	; 4
    2568:	31 05       	cpc	r19, r1
    256a:	80 f4       	brcc	.+32     	; 0x258c <malloc+0x9c>
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	9b 81       	ldd	r25, Y+3	; 0x03
    2570:	61 15       	cp	r22, r1
    2572:	71 05       	cpc	r23, r1
    2574:	21 f0       	breq	.+8      	; 0x257e <malloc+0x8e>
    2576:	fb 01       	movw	r30, r22
    2578:	93 83       	std	Z+3, r25	; 0x03
    257a:	82 83       	std	Z+2, r24	; 0x02
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <malloc+0x96>
    257e:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__flp+0x1>
    2582:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__flp>
    2586:	fe 01       	movw	r30, r28
    2588:	32 96       	adiw	r30, 0x02	; 2
    258a:	44 c0       	rjmp	.+136    	; 0x2614 <malloc+0x124>
    258c:	fe 01       	movw	r30, r28
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	81 93       	st	Z+, r24
    2594:	91 93       	st	Z+, r25
    2596:	22 50       	subi	r18, 0x02	; 2
    2598:	31 09       	sbc	r19, r1
    259a:	39 83       	std	Y+1, r19	; 0x01
    259c:	28 83       	st	Y, r18
    259e:	3a c0       	rjmp	.+116    	; 0x2614 <malloc+0x124>
    25a0:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <__brkval>
    25a4:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <__brkval+0x1>
    25a8:	23 2b       	or	r18, r19
    25aa:	41 f4       	brne	.+16     	; 0x25bc <malloc+0xcc>
    25ac:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    25b0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    25b4:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <__brkval+0x1>
    25b8:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <__brkval>
    25bc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    25c0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    25c4:	21 15       	cp	r18, r1
    25c6:	31 05       	cpc	r19, r1
    25c8:	41 f4       	brne	.+16     	; 0x25da <malloc+0xea>
    25ca:	2d b7       	in	r18, 0x3d	; 61
    25cc:	3e b7       	in	r19, 0x3e	; 62
    25ce:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    25d2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    25d6:	24 1b       	sub	r18, r20
    25d8:	35 0b       	sbc	r19, r21
    25da:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <__brkval>
    25de:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <__brkval+0x1>
    25e2:	e2 17       	cp	r30, r18
    25e4:	f3 07       	cpc	r31, r19
    25e6:	a0 f4       	brcc	.+40     	; 0x2610 <malloc+0x120>
    25e8:	2e 1b       	sub	r18, r30
    25ea:	3f 0b       	sbc	r19, r31
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	78 f0       	brcs	.+30     	; 0x2610 <malloc+0x120>
    25f2:	ac 01       	movw	r20, r24
    25f4:	4e 5f       	subi	r20, 0xFE	; 254
    25f6:	5f 4f       	sbci	r21, 0xFF	; 255
    25f8:	24 17       	cp	r18, r20
    25fa:	35 07       	cpc	r19, r21
    25fc:	48 f0       	brcs	.+18     	; 0x2610 <malloc+0x120>
    25fe:	4e 0f       	add	r20, r30
    2600:	5f 1f       	adc	r21, r31
    2602:	50 93 37 03 	sts	0x0337, r21	; 0x800337 <__brkval+0x1>
    2606:	40 93 36 03 	sts	0x0336, r20	; 0x800336 <__brkval>
    260a:	81 93       	st	Z+, r24
    260c:	91 93       	st	Z+, r25
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <malloc+0x124>
    2610:	e0 e0       	ldi	r30, 0x00	; 0
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	cf 01       	movw	r24, r30
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <free>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	09 f4       	brne	.+2      	; 0x262a <free+0xa>
    2628:	81 c0       	rjmp	.+258    	; 0x272c <free+0x10c>
    262a:	fc 01       	movw	r30, r24
    262c:	32 97       	sbiw	r30, 0x02	; 2
    262e:	13 82       	std	Z+3, r1	; 0x03
    2630:	12 82       	std	Z+2, r1	; 0x02
    2632:	a0 91 38 03 	lds	r26, 0x0338	; 0x800338 <__flp>
    2636:	b0 91 39 03 	lds	r27, 0x0339	; 0x800339 <__flp+0x1>
    263a:	10 97       	sbiw	r26, 0x00	; 0
    263c:	81 f4       	brne	.+32     	; 0x265e <free+0x3e>
    263e:	20 81       	ld	r18, Z
    2640:	31 81       	ldd	r19, Z+1	; 0x01
    2642:	82 0f       	add	r24, r18
    2644:	93 1f       	adc	r25, r19
    2646:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <__brkval>
    264a:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <__brkval+0x1>
    264e:	28 17       	cp	r18, r24
    2650:	39 07       	cpc	r19, r25
    2652:	51 f5       	brne	.+84     	; 0x26a8 <free+0x88>
    2654:	f0 93 37 03 	sts	0x0337, r31	; 0x800337 <__brkval+0x1>
    2658:	e0 93 36 03 	sts	0x0336, r30	; 0x800336 <__brkval>
    265c:	67 c0       	rjmp	.+206    	; 0x272c <free+0x10c>
    265e:	ed 01       	movw	r28, r26
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	ce 17       	cp	r28, r30
    2666:	df 07       	cpc	r29, r31
    2668:	40 f4       	brcc	.+16     	; 0x267a <free+0x5a>
    266a:	4a 81       	ldd	r20, Y+2	; 0x02
    266c:	5b 81       	ldd	r21, Y+3	; 0x03
    266e:	9e 01       	movw	r18, r28
    2670:	41 15       	cp	r20, r1
    2672:	51 05       	cpc	r21, r1
    2674:	f1 f0       	breq	.+60     	; 0x26b2 <free+0x92>
    2676:	ea 01       	movw	r28, r20
    2678:	f5 cf       	rjmp	.-22     	; 0x2664 <free+0x44>
    267a:	d3 83       	std	Z+3, r29	; 0x03
    267c:	c2 83       	std	Z+2, r28	; 0x02
    267e:	40 81       	ld	r20, Z
    2680:	51 81       	ldd	r21, Z+1	; 0x01
    2682:	84 0f       	add	r24, r20
    2684:	95 1f       	adc	r25, r21
    2686:	c8 17       	cp	r28, r24
    2688:	d9 07       	cpc	r29, r25
    268a:	59 f4       	brne	.+22     	; 0x26a2 <free+0x82>
    268c:	88 81       	ld	r24, Y
    268e:	99 81       	ldd	r25, Y+1	; 0x01
    2690:	84 0f       	add	r24, r20
    2692:	95 1f       	adc	r25, r21
    2694:	02 96       	adiw	r24, 0x02	; 2
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	93 83       	std	Z+3, r25	; 0x03
    26a0:	82 83       	std	Z+2, r24	; 0x02
    26a2:	21 15       	cp	r18, r1
    26a4:	31 05       	cpc	r19, r1
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <free+0x92>
    26a8:	f0 93 39 03 	sts	0x0339, r31	; 0x800339 <__flp+0x1>
    26ac:	e0 93 38 03 	sts	0x0338, r30	; 0x800338 <__flp>
    26b0:	3d c0       	rjmp	.+122    	; 0x272c <free+0x10c>
    26b2:	e9 01       	movw	r28, r18
    26b4:	fb 83       	std	Y+3, r31	; 0x03
    26b6:	ea 83       	std	Y+2, r30	; 0x02
    26b8:	49 91       	ld	r20, Y+
    26ba:	59 91       	ld	r21, Y+
    26bc:	c4 0f       	add	r28, r20
    26be:	d5 1f       	adc	r29, r21
    26c0:	ec 17       	cp	r30, r28
    26c2:	fd 07       	cpc	r31, r29
    26c4:	61 f4       	brne	.+24     	; 0x26de <free+0xbe>
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	84 0f       	add	r24, r20
    26cc:	95 1f       	adc	r25, r21
    26ce:	02 96       	adiw	r24, 0x02	; 2
    26d0:	e9 01       	movw	r28, r18
    26d2:	99 83       	std	Y+1, r25	; 0x01
    26d4:	88 83       	st	Y, r24
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	9b 83       	std	Y+3, r25	; 0x03
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	e0 e0       	ldi	r30, 0x00	; 0
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	12 96       	adiw	r26, 0x02	; 2
    26e4:	8d 91       	ld	r24, X+
    26e6:	9c 91       	ld	r25, X
    26e8:	13 97       	sbiw	r26, 0x03	; 3
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <free+0xd4>
    26ee:	fd 01       	movw	r30, r26
    26f0:	dc 01       	movw	r26, r24
    26f2:	f7 cf       	rjmp	.-18     	; 0x26e2 <free+0xc2>
    26f4:	8d 91       	ld	r24, X+
    26f6:	9c 91       	ld	r25, X
    26f8:	11 97       	sbiw	r26, 0x01	; 1
    26fa:	9d 01       	movw	r18, r26
    26fc:	2e 5f       	subi	r18, 0xFE	; 254
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <__brkval>
    2708:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <__brkval+0x1>
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	69 f4       	brne	.+26     	; 0x272c <free+0x10c>
    2712:	30 97       	sbiw	r30, 0x00	; 0
    2714:	29 f4       	brne	.+10     	; 0x2720 <free+0x100>
    2716:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <__flp+0x1>
    271a:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <__flp>
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <free+0x104>
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	b0 93 37 03 	sts	0x0337, r27	; 0x800337 <__brkval+0x1>
    2728:	a0 93 36 03 	sts	0x0336, r26	; 0x800336 <__brkval>
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <strnlen_P>:
    2732:	fc 01       	movw	r30, r24
    2734:	05 90       	lpm	r0, Z+
    2736:	61 50       	subi	r22, 0x01	; 1
    2738:	70 40       	sbci	r23, 0x00	; 0
    273a:	01 10       	cpse	r0, r1
    273c:	d8 f7       	brcc	.-10     	; 0x2734 <strnlen_P+0x2>
    273e:	80 95       	com	r24
    2740:	90 95       	com	r25
    2742:	8e 0f       	add	r24, r30
    2744:	9f 1f       	adc	r25, r31
    2746:	08 95       	ret

00002748 <memset>:
    2748:	dc 01       	movw	r26, r24
    274a:	01 c0       	rjmp	.+2      	; 0x274e <memset+0x6>
    274c:	6d 93       	st	X+, r22
    274e:	41 50       	subi	r20, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	e0 f7       	brcc	.-8      	; 0x274c <memset+0x4>
    2754:	08 95       	ret

00002756 <strnlen>:
    2756:	fc 01       	movw	r30, r24
    2758:	61 50       	subi	r22, 0x01	; 1
    275a:	70 40       	sbci	r23, 0x00	; 0
    275c:	01 90       	ld	r0, Z+
    275e:	01 10       	cpse	r0, r1
    2760:	d8 f7       	brcc	.-10     	; 0x2758 <strnlen+0x2>
    2762:	80 95       	com	r24
    2764:	90 95       	com	r25
    2766:	8e 0f       	add	r24, r30
    2768:	9f 1f       	adc	r25, r31
    276a:	08 95       	ret

0000276c <fputc>:
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	fb 01       	movw	r30, r22
    2776:	23 81       	ldd	r18, Z+3	; 0x03
    2778:	21 fd       	sbrc	r18, 1
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <fputc+0x16>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	9f ef       	ldi	r25, 0xFF	; 255
    2780:	2c c0       	rjmp	.+88     	; 0x27da <fputc+0x6e>
    2782:	22 ff       	sbrs	r18, 2
    2784:	16 c0       	rjmp	.+44     	; 0x27b2 <fputc+0x46>
    2786:	46 81       	ldd	r20, Z+6	; 0x06
    2788:	57 81       	ldd	r21, Z+7	; 0x07
    278a:	24 81       	ldd	r18, Z+4	; 0x04
    278c:	35 81       	ldd	r19, Z+5	; 0x05
    278e:	42 17       	cp	r20, r18
    2790:	53 07       	cpc	r21, r19
    2792:	44 f4       	brge	.+16     	; 0x27a4 <fputc+0x38>
    2794:	a0 81       	ld	r26, Z
    2796:	b1 81       	ldd	r27, Z+1	; 0x01
    2798:	9d 01       	movw	r18, r26
    279a:	2f 5f       	subi	r18, 0xFF	; 255
    279c:	3f 4f       	sbci	r19, 0xFF	; 255
    279e:	31 83       	std	Z+1, r19	; 0x01
    27a0:	20 83       	st	Z, r18
    27a2:	8c 93       	st	X, r24
    27a4:	26 81       	ldd	r18, Z+6	; 0x06
    27a6:	37 81       	ldd	r19, Z+7	; 0x07
    27a8:	2f 5f       	subi	r18, 0xFF	; 255
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	37 83       	std	Z+7, r19	; 0x07
    27ae:	26 83       	std	Z+6, r18	; 0x06
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <fputc+0x6e>
    27b2:	8b 01       	movw	r16, r22
    27b4:	ec 01       	movw	r28, r24
    27b6:	fb 01       	movw	r30, r22
    27b8:	00 84       	ldd	r0, Z+8	; 0x08
    27ba:	f1 85       	ldd	r31, Z+9	; 0x09
    27bc:	e0 2d       	mov	r30, r0
    27be:	09 95       	icall
    27c0:	89 2b       	or	r24, r25
    27c2:	e1 f6       	brne	.-72     	; 0x277c <fputc+0x10>
    27c4:	d8 01       	movw	r26, r16
    27c6:	16 96       	adiw	r26, 0x06	; 6
    27c8:	8d 91       	ld	r24, X+
    27ca:	9c 91       	ld	r25, X
    27cc:	17 97       	sbiw	r26, 0x07	; 7
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	17 96       	adiw	r26, 0x07	; 7
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
    27d6:	16 97       	sbiw	r26, 0x06	; 6
    27d8:	ce 01       	movw	r24, r28
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <__ultoa_invert>:
    27e4:	fa 01       	movw	r30, r20
    27e6:	aa 27       	eor	r26, r26
    27e8:	28 30       	cpi	r18, 0x08	; 8
    27ea:	51 f1       	breq	.+84     	; 0x2840 <__ultoa_invert+0x5c>
    27ec:	20 31       	cpi	r18, 0x10	; 16
    27ee:	81 f1       	breq	.+96     	; 0x2850 <__ultoa_invert+0x6c>
    27f0:	e8 94       	clt
    27f2:	6f 93       	push	r22
    27f4:	6e 7f       	andi	r22, 0xFE	; 254
    27f6:	6e 5f       	subi	r22, 0xFE	; 254
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	8f 4f       	sbci	r24, 0xFF	; 255
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	af 4f       	sbci	r26, 0xFF	; 255
    2800:	b1 e0       	ldi	r27, 0x01	; 1
    2802:	3e d0       	rcall	.+124    	; 0x2880 <__ultoa_invert+0x9c>
    2804:	b4 e0       	ldi	r27, 0x04	; 4
    2806:	3c d0       	rcall	.+120    	; 0x2880 <__ultoa_invert+0x9c>
    2808:	67 0f       	add	r22, r23
    280a:	78 1f       	adc	r23, r24
    280c:	89 1f       	adc	r24, r25
    280e:	9a 1f       	adc	r25, r26
    2810:	a1 1d       	adc	r26, r1
    2812:	68 0f       	add	r22, r24
    2814:	79 1f       	adc	r23, r25
    2816:	8a 1f       	adc	r24, r26
    2818:	91 1d       	adc	r25, r1
    281a:	a1 1d       	adc	r26, r1
    281c:	6a 0f       	add	r22, r26
    281e:	71 1d       	adc	r23, r1
    2820:	81 1d       	adc	r24, r1
    2822:	91 1d       	adc	r25, r1
    2824:	a1 1d       	adc	r26, r1
    2826:	20 d0       	rcall	.+64     	; 0x2868 <__ultoa_invert+0x84>
    2828:	09 f4       	brne	.+2      	; 0x282c <__ultoa_invert+0x48>
    282a:	68 94       	set
    282c:	3f 91       	pop	r19
    282e:	2a e0       	ldi	r18, 0x0A	; 10
    2830:	26 9f       	mul	r18, r22
    2832:	11 24       	eor	r1, r1
    2834:	30 19       	sub	r19, r0
    2836:	30 5d       	subi	r19, 0xD0	; 208
    2838:	31 93       	st	Z+, r19
    283a:	de f6       	brtc	.-74     	; 0x27f2 <__ultoa_invert+0xe>
    283c:	cf 01       	movw	r24, r30
    283e:	08 95       	ret
    2840:	46 2f       	mov	r20, r22
    2842:	47 70       	andi	r20, 0x07	; 7
    2844:	40 5d       	subi	r20, 0xD0	; 208
    2846:	41 93       	st	Z+, r20
    2848:	b3 e0       	ldi	r27, 0x03	; 3
    284a:	0f d0       	rcall	.+30     	; 0x286a <__ultoa_invert+0x86>
    284c:	c9 f7       	brne	.-14     	; 0x2840 <__ultoa_invert+0x5c>
    284e:	f6 cf       	rjmp	.-20     	; 0x283c <__ultoa_invert+0x58>
    2850:	46 2f       	mov	r20, r22
    2852:	4f 70       	andi	r20, 0x0F	; 15
    2854:	40 5d       	subi	r20, 0xD0	; 208
    2856:	4a 33       	cpi	r20, 0x3A	; 58
    2858:	18 f0       	brcs	.+6      	; 0x2860 <__ultoa_invert+0x7c>
    285a:	49 5d       	subi	r20, 0xD9	; 217
    285c:	31 fd       	sbrc	r19, 1
    285e:	40 52       	subi	r20, 0x20	; 32
    2860:	41 93       	st	Z+, r20
    2862:	02 d0       	rcall	.+4      	; 0x2868 <__ultoa_invert+0x84>
    2864:	a9 f7       	brne	.-22     	; 0x2850 <__ultoa_invert+0x6c>
    2866:	ea cf       	rjmp	.-44     	; 0x283c <__ultoa_invert+0x58>
    2868:	b4 e0       	ldi	r27, 0x04	; 4
    286a:	a6 95       	lsr	r26
    286c:	97 95       	ror	r25
    286e:	87 95       	ror	r24
    2870:	77 95       	ror	r23
    2872:	67 95       	ror	r22
    2874:	ba 95       	dec	r27
    2876:	c9 f7       	brne	.-14     	; 0x286a <__ultoa_invert+0x86>
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	61 05       	cpc	r22, r1
    287c:	71 05       	cpc	r23, r1
    287e:	08 95       	ret
    2880:	9b 01       	movw	r18, r22
    2882:	ac 01       	movw	r20, r24
    2884:	0a 2e       	mov	r0, r26
    2886:	06 94       	lsr	r0
    2888:	57 95       	ror	r21
    288a:	47 95       	ror	r20
    288c:	37 95       	ror	r19
    288e:	27 95       	ror	r18
    2890:	ba 95       	dec	r27
    2892:	c9 f7       	brne	.-14     	; 0x2886 <__ultoa_invert+0xa2>
    2894:	62 0f       	add	r22, r18
    2896:	73 1f       	adc	r23, r19
    2898:	84 1f       	adc	r24, r20
    289a:	95 1f       	adc	r25, r21
    289c:	a0 1d       	adc	r26, r0
    289e:	08 95       	ret

000028a0 <__prologue_saves__>:
    28a0:	2f 92       	push	r2
    28a2:	3f 92       	push	r3
    28a4:	4f 92       	push	r4
    28a6:	5f 92       	push	r5
    28a8:	6f 92       	push	r6
    28aa:	7f 92       	push	r7
    28ac:	8f 92       	push	r8
    28ae:	9f 92       	push	r9
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	ca 1b       	sub	r28, r26
    28ca:	db 0b       	sbc	r29, r27
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	09 94       	ijmp

000028d8 <__epilogue_restores__>:
    28d8:	2a 88       	ldd	r2, Y+18	; 0x12
    28da:	39 88       	ldd	r3, Y+17	; 0x11
    28dc:	48 88       	ldd	r4, Y+16	; 0x10
    28de:	5f 84       	ldd	r5, Y+15	; 0x0f
    28e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ea:	b9 84       	ldd	r11, Y+9	; 0x09
    28ec:	c8 84       	ldd	r12, Y+8	; 0x08
    28ee:	df 80       	ldd	r13, Y+7	; 0x07
    28f0:	ee 80       	ldd	r14, Y+6	; 0x06
    28f2:	fd 80       	ldd	r15, Y+5	; 0x05
    28f4:	0c 81       	ldd	r16, Y+4	; 0x04
    28f6:	1b 81       	ldd	r17, Y+3	; 0x03
    28f8:	aa 81       	ldd	r26, Y+2	; 0x02
    28fa:	b9 81       	ldd	r27, Y+1	; 0x01
    28fc:	ce 0f       	add	r28, r30
    28fe:	d1 1d       	adc	r29, r1
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	ed 01       	movw	r28, r26
    290c:	08 95       	ret

0000290e <_exit>:
    290e:	f8 94       	cli

00002910 <__stop_program>:
    2910:	ff cf       	rjmp	.-2      	; 0x2910 <__stop_program>
